/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Widget group to which a widget belongs
 */
export type IGroupID = string;
/**
 * Expression which evaluates to a numeric value
 */
export type IValueExpression = string;
export type INumericOrInfinityType = number | 'Infinity' | '-Infinity';

/**
 * A vocabulary to annotate and validate the JSON representation of 3D scene configuration data
 */
export interface I3DScenesConfig {
    $schema: string;
    /**
     * 3D scene configuration data
     */
    configuration: {
        scenes: {
            id: string;
            displayName: string;
            elements: (ITwinToObjectMapping | ICustomProperty)[];
            behaviorIDs: string[];
            assets: {
                type: string;
                url: string;
                extensionProperties?: IExtensionProperties;
                [k: string]: unknown;
            }[];
            [k: string]: unknown;
        }[];
        behaviors: {
            id: string;
            displayName: string;
            twinAliases?: string[];
            /**
             * Data sources return an array of objects.  Each object is expected to have the same schema.  These objects can then be mapped over in visuals.
             */
            datasources: (IElementTwinToObjectMappingDataSource | ICustomProperty)[];
            /**
             * Visuals take a datasource, and modify objects in the scene based on expressions.  They allow you to color objects based on their state, float badges under alert conditions and configure popovers that trigger with user interaction
             */
            visuals: (IPopoverVisual | IStatusColoringVisual | IAlertVisual)[];
            [k: string]: unknown;
        }[];
        layers: {
            id: string;
            displayName: string;
            behaviorIDs: string[];
            extensionProperties?: IExtensionProperties;
            [k: string]: unknown;
        }[];
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * An elements maps twins to objects in the scene
 */
export interface ITwinToObjectMapping {
    type: 'TwinToObjectMapping';
    id: string;
    displayName: string;
    /**
     * The twin referenced by this element
     */
    linkedTwinID: string;
    /**
     * Array of of object IDs in the scene
     */
    objectIDs: string[];
    /**
     * Links to relevant twins other than the primary linkedTwin.  These aliases can be referenced in behavior expressions.
     */
    twinAliases?: {
        [k: string]: string;
    };
    extensionProperties?: IExtensionProperties;
    [k: string]: unknown;
}
/**
 * Optional bag of non-schematized extension properties
 */
export interface IExtensionProperties {
    [k: string]: unknown;
}
/**
 * Free form property
 */
export interface ICustomProperty {
    /**
     * Bag for any custom properties
     */
    customProperties: {
        [k: string]: unknown;
    };
}
/**
 * These datasources get their objects from the elements defined in a scene
 */
export interface IElementTwinToObjectMappingDataSource {
    type: 'ElementTwinToObjectMappingDataSource';
    elementIDs: string[];
    extensionProperties?: IExtensionProperties;
    [k: string]: unknown;
}
/**
 * A popover displays information about a datasource when you click on any of the associated objectIDs
 */
export interface IPopoverVisual {
    type: 'Popover';
    title: string;
    /**
     * Widgets are visuals within a popover.  Widgets can be grouped via widgetGroups property.
     */
    widgets: (
        | {
              type: 'Gauge';
              groupID?: IGroupID;
              valueExpression: IValueExpression;
              /**
               * Widget configuration specifies widget specific properties that are used for rendering this gauge
               */
              widgetConfiguration: {
                  units?: string;
                  label?: string;
                  min?: INumericOrInfinityType;
                  max?: INumericOrInfinityType;
                  [k: string]: unknown;
              };
              extensionProperties?: IExtensionProperties;
              [k: string]: unknown;
          }
        | {
              type: 'Link';
              groupID?: IGroupID;
              /**
               * Widget configuration specifies widget specific properties that are used for rendering this Link
               */
              widgetConfiguration: {
                  /**
                   * Template string which evalues to http link
                   */
                  linkExpression?: string;
                  [k: string]: unknown;
              };
              [k: string]: unknown;
          }
    )[];
    widgetGroups: {
        id: string;
        title?: string;
        orientation?: string;
        [k: string]: unknown;
    }[];
    objectIDs: IObjectIDs;
    [k: string]: unknown;
}
/**
 * objectIDs specify the objects in the scene that a visual pertains to
 */
export interface IObjectIDs {
    expression: string;
    extensionProperties?: IExtensionProperties;
    [k: string]: unknown;
}
/**
 * a StatusColoring visual is used for mapping an expression result to a color
 */
export interface IStatusColoringVisual {
    type: 'StatusColoring';
    /**
     * Expression which evaluates to numeric value
     */
    statusValueExpression: string;
    statusValueRanges: {
        color: string;
        min: INumericOrInfinityType;
        max: INumericOrInfinityType;
        [k: string]: unknown;
    }[];
    objectIDs: IObjectIDs;
    [k: string]: unknown;
}
/**
 * Alert visual are used to show specific iconography when a boolean expression is true
 */
export interface IAlertVisual {
    type: 'Alert';
    /**
     * Expression which evaluates to a boolean value
     */
    triggerExpression: string;
    /**
     * Expression which evalues to a string value
     */
    labelExpression: string;
    iconName: string;
    color: string;
    objectIDs: IObjectIDs;
    [k: string]: unknown;
}
