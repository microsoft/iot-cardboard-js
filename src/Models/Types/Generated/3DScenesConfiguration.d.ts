/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Widget group to which a widget belongs
 */
export type GroupID = string;
/**
 * Expression which evaluates to a numeric value
 */
export type ValueExpression = string;
export type NumericOrInfinityType = number | 'Infinity' | '-Infinity';

/**
 * A vocabulary to annotate and validate the JSON representation of 3D scene configuration data
 */
export interface DScenesConfigurationJSONSchema {
    $schema: string;
    /**
     * 3D scene configuration data
     */
    configuration: {
        scenes: {
            id: string;
            displayName: string;
            elements: (
                | {
                      type: 'TwinToObjectMapping';
                      id: string;
                      displayName: string;
                      /**
                       * The twin referenced by this element
                       */
                      linkedTwinID: string;
                      /**
                       * Array of of object IDs in the scene
                       */
                      objectIDs: string[];
                      /**
                       * Links to relevant twins other than the primary linkedTwin.  These aliases can be referenced in behavior expressions.
                       */
                      twinAliases?: {
                          [k: string]: string;
                      };
                      extensionProperties?: ExtensionProperties;
                      [k: string]: unknown;
                  }
                | CustomProperty
            )[];
            behaviorIDs: string[];
            assets: {
                type: string;
                url: string;
                extensionProperties?: ExtensionProperties;
                [k: string]: unknown;
            }[];
            [k: string]: unknown;
        }[];
        behaviors: {
            id: string;
            displayName: string;
            twinAliases?: string[];
            /**
             * Data sources return an array of objects.  Each object is expected to have the same schema.  These objects can then be mapped over in visuals.
             */
            datasources: (
                | {
                      type: 'ElementTwinToObjectMappingDataSource';
                      elementIDs: string[];
                      extensionProperties?: ExtensionProperties;
                      [k: string]: unknown;
                  }
                | CustomProperty
            )[];
            /**
             * Visuals take a datasource, and modify objects in the scene based on expressions.  They allow you to color objects based on their state, float badges under alert conditions and configure popovers that trigger with user interaction
             */
            visuals: (
                | {
                      type: 'Popover';
                      title: string;
                      /**
                       * Widgets are visuals within a popover.  Widgets can be grouped via widgetGroups property.
                       */
                      widgets: (
                          | {
                                type: 'Gauge';
                                groupID?: GroupID;
                                valueExpression: ValueExpression;
                                /**
                                 * Widget configuration specifies widget specific properties that are used for rendering this gauge
                                 */
                                widgetConfiguration: {
                                    units?: string;
                                    label?: string;
                                    min?: NumericOrInfinityType;
                                    max?: NumericOrInfinityType;
                                    [k: string]: unknown;
                                };
                                extensionProperties?: ExtensionProperties;
                                [k: string]: unknown;
                            }
                          | {
                                type: 'Link';
                                groupID?: GroupID;
                                /**
                                 * Widget configuration specifies widget specific properties that are used for rendering this Link
                                 */
                                widgetConfiguration: {
                                    /**
                                     * Template string which evalues to http link
                                     */
                                    linkExpression?: string;
                                    [k: string]: unknown;
                                };
                                [k: string]: unknown;
                            }
                      )[];
                      widgetGroups: {
                          id: string;
                          title?: string;
                          orientation?: string;
                          [k: string]: unknown;
                      }[];
                      objectIDs: ObjectIDs;
                      [k: string]: unknown;
                  }
                | {
                      type: 'StatusColoring';
                      /**
                       * Expression which evaluates to numeric value
                       */
                      statusValueExpression: string;
                      statusValueRanges: {
                          color: string;
                          min: NumericOrInfinityType;
                          max: NumericOrInfinityType;
                          [k: string]: unknown;
                      }[];
                      objectIDs: ObjectIDs;
                      [k: string]: unknown;
                  }
                | {
                      type: 'Alert';
                      /**
                       * Expression which evaluates to a boolean value
                       */
                      triggerExpression: string;
                      /**
                       * Expression which evalues to a string value
                       */
                      labelExpression: string;
                      iconName: string;
                      color: string;
                      objectIDs: ObjectIDs;
                      [k: string]: unknown;
                  }
            )[];
            [k: string]: unknown;
        }[];
        layers: {
            id: string;
            displayName: string;
            behaviorIDs: string[];
            extensionProperties?: ExtensionProperties;
            [k: string]: unknown;
        }[];
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Optional bag of non-schematized extension properties
 */
export interface ExtensionProperties {
    [k: string]: unknown;
}
/**
 * Free form property
 */
export interface CustomProperty {
    /**
     * Bag for any custom properties
     */
    customProperties: {
        [k: string]: unknown;
    };
}
/**
 * objectIDs specify the objects in the scene that a visual pertains to
 */
export interface ObjectIDs {
    expression: string;
    extensionProperties?: ExtensionProperties;
    [k: string]: unknown;
}
