{
    "id": "3d69bd9d6c9d4df09f74b47aa5b36587",
    "data": {
        "modelPositions": [
            {
                "@id": "dtmi:digitaltwins:GeoSPARQL:Feature;1",
                "position": {
                    "x": 519.4421776335383,
                    "y": -742.1102180827951
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:geoLocation;1",
                "position": {
                    "x": 227.57565187379325,
                    "y": -804.947309173401
                }
            },
            {
                "@id": "dtmi:digitaltwins:GeoSPARQL:Geometry;1",
                "position": {
                    "x": 703.433094991448,
                    "y": -979.0217953740223
                }
            },
            {
                "@id": "dtmi:digitaltwins:GeoSPARQL:SpatialObject;1",
                "position": {
                    "x": 816.1003908692368,
                    "y": -701.5938842320832
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Streetlight;1",
                "position": {
                    "x": 181.33455020189484,
                    "y": -105.7310428093599
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:StreetlightControlCabinet;1",
                "position": {
                    "x": 23.120126973370272,
                    "y": -588.3467328857006
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:StreetlightGroup;1",
                "position": {
                    "x": -199.17133140454263,
                    "y": -787.0700899307897
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:StreetlightModel;1",
                "position": {
                    "x": -262.9283440344623,
                    "y": -495.3140183896773
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:BoatAuthorized;1",
                "position": {
                    "x": 409.4321236363579,
                    "y": 82.19165679760235
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:BoatPlacePricing;1",
                "position": {
                    "x": -441.4779832656173,
                    "y": 387.0572092036826
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:BoatPlacesAvailable;1",
                "position": {
                    "x": -546.1381407347385,
                    "y": -399.3975408115253
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:SeaportFacilities;1",
                "position": {
                    "x": -40.63481070021795,
                    "y": -296.3317470098806
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Beach;1",
                "position": {
                    "x": -708.6094280795324,
                    "y": -893.2559651645412
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Museum;1",
                "position": {
                    "x": 303.4212773213802,
                    "y": -485.94552939684576
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:OpeningHourSpecification;1",
                "position": {
                    "x": 452.6033204122434,
                    "y": -226.07431182515492
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:PointOfInterest;1",
                "position": {
                    "x": -156.76187207899818,
                    "y": 292.1174347304876
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Store;1",
                "position": {
                    "x": -484.6064621421055,
                    "y": -693.1048596521414
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:acceptedPaymentMethod;1",
                "position": {
                    "x": -1070.180415186706,
                    "y": 870.636376317146
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:allowedVehicleType;1",
                "position": {
                    "x": -889.6343410567487,
                    "y": -9.088492783046497
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:areaServed;1",
                "position": {
                    "x": -279.9825467776023,
                    "y": 878.8753938565669
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:areBordersMarked;1",
                "position": {
                    "x": -1457.814991736069,
                    "y": 180.4980615477969
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:availableSpotNumber;1",
                "position": {
                    "x": -1397.7481065774314,
                    "y": -113.00479710944131
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:averageSpotLength;1",
                "position": {
                    "x": -1008.569494856813,
                    "y": 577.4067873088385
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:averageSpotWidth;1",
                "position": {
                    "x": -1112.4450620917407,
                    "y": -206.90291346967743
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:chargeType;1",
                "position": {
                    "x": -1233.0218583588203,
                    "y": 378.1179379901997
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:extraSpotNumber;1",
                "position": {
                    "x": -785.670339306826,
                    "y": 776.9605702956034
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:maximumAllowedHeight;1",
                "position": {
                    "x": -1335.969706893293,
                    "y": -406.59699138697476
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:maximumAllowedWidth;1",
                "position": {
                    "x": -828.7539709263643,
                    "y": -302.48680289766367
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:maximumParkingDuration;1",
                "position": {
                    "x": -217.53599073238757,
                    "y": 584.8140478067036
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:occupancyDetectionType;1",
                "position": {
                    "x": -501.53176140551756,
                    "y": 679.1341874846192
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:parkingMode;1",
                "position": {
                    "x": -1293.2420195016923,
                    "y": 670.6099643756497
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:requiredPermit;1",
                "position": {
                    "x": -1172.9223197767642,
                    "y": 84.625821363565
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:reservationType;1",
                "position": {
                    "x": -1052.3750784814142,
                    "y": -501.336197563798
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:totalSpotNumber;1",
                "position": {
                    "x": -665.2821529478944,
                    "y": 188.66920417208644
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:ParkingSpot;1",
                "position": {
                    "x": -382.57710647302656,
                    "y": 95.16599622886542
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:ParkingGroup;1",
                "position": {
                    "x": -607.4986442007572,
                    "y": -104.07912039377308
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:OnStreetParking;1",
                "position": {
                    "x": -949.6915677999056,
                    "y": 282.8472618389759
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:OffStreetParking;1",
                "position": {
                    "x": -725.289633769525,
                    "y": 481.9088341111127
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:TrafficFlowObserved;1",
                "position": {
                    "x": -423.18716984197357,
                    "y": -986.4588158627545
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Road;1",
                "position": {
                    "x": -218.6759387689981,
                    "y": -1205.9033303629774
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:RoadSegment;1",
                "position": {
                    "x": 4.915135092513893,
                    "y": -1005.9310408169462
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:EVChargingStation;1",
                "position": {
                    "x": 129.8607432097093,
                    "y": 187.01411543439647
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:CrowdFlowObserved;1",
                "position": {
                    "x": 684.9157247384686,
                    "y": -36.749505930522
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:EnvironmentBaseModel;1",
                "position": {
                    "x": 359.66551078673405,
                    "y": 378.1580825500561
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:WeatherObserved;1",
                "position": {
                    "x": 308.7574355803527,
                    "y": 673.5561208177978
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:WaterQualityObserved;1",
                "position": {
                    "x": 872.3122320556835,
                    "y": 463.81997194866267
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:NoiseLevelObserved;1",
                "position": {
                    "x": 26.56737925644609,
                    "y": 776.4780880438497
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1",
                "position": {
                    "x": 540.0883004820258,
                    "y": 864.686309492042
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:AirQualityObserved;1",
                "position": {
                    "x": 591.2534521365255,
                    "y": 569.2950332956568
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Address;1",
                "position": {
                    "x": -768.8096506432314,
                    "y": -599.1728145470573
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "position": {
                    "x": -324.1557931659891,
                    "y": -201.22178617828757
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:ContactPoint;1",
                "position": {
                    "x": -99.18620578815118,
                    "y": -2.8021007089189425
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Device;1",
                "position": {
                    "x": 76.1222786253142,
                    "y": 481.0706056435189
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:deviceCategory;1",
                "position": {
                    "x": 256.120079414493,
                    "y": 969.0904572355521
                }
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:DeviceModel;1",
                "position": {
                    "x": -47.39229326256813,
                    "y": 1066.3486401198127
                }
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:CityFurniture;1",
                "position": {
                    "x": 633.5431539049736,
                    "y": -465.29894024304815
                }
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:CityObject;1",
                "position": {
                    "x": 410.09223788618874,
                    "y": -1041.2352500278976
                }
            },
            {
                "@id": "dtmi:digitaltwins:city:Pole;1",
                "position": {
                    "x": 640.4197258593612,
                    "y": 273.38211935021366
                }
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:AdministrativeArea;1",
                "position": {
                    "x": 1049.5121622653744,
                    "y": -513.4209752727695
                }
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:City;1",
                "position": {
                    "x": 1007.954171829603,
                    "y": -931.5465447234111
                }
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:Country;1",
                "position": {
                    "x": 1165.7692383742606,
                    "y": -236.98135474245686
                }
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:District;1",
                "position": {
                    "x": 866.1373917572439,
                    "y": -275.938327098245
                }
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:Neighbourhood;1",
                "position": {
                    "x": 982.5172681503608,
                    "y": 0.5351581616597159
                }
            }
        ],
        "models": [
            {
                "@id": "dtmi:digitaltwins:GeoSPARQL:Feature;1",
                "@type": "Interface",
                "displayName": "Feature",
                "description": "This class represents the top-level feature type. This class is equivalent to GFI_Feature defined in ISO 19156:2011, and it is superclass of all feature types. GeoSPARQL 1.0 is an OGC Standard.Copyright (c) 2012 Open Geospatial Consortium.",
                "extends": "dtmi:digitaltwins:GeoSPARQL:SpatialObject;1",
                "contents": [
                    {
                        "@type": "Relationship",
                        "name": "hasGeometry",
                        "target": "dtmi:digitaltwins:GeoSPARQL:Geometry;1"
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:geoLocation;1",
                "@type": "Interface",
                "displayName": "GeoLocation",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "type",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "position",
                                    "displayName": "Position",
                                    "enumValue": "Position"
                                },
                                {
                                    "name": "point",
                                    "displayName": "Point",
                                    "enumValue": "Point"
                                },
                                {
                                    "name": "multiPoint",
                                    "displayName": "MultiPoint",
                                    "enumValue": "MultiPoint"
                                },
                                {
                                    "name": "lineString",
                                    "displayName": "LineString",
                                    "enumValue": "LineString"
                                },
                                {
                                    "name": "multiLineString",
                                    "displayName": "MultiLineString",
                                    "enumValue": "MultiLineString"
                                },
                                {
                                    "name": "polygon",
                                    "displayName": "Polygon",
                                    "enumValue": "Polygon"
                                },
                                {
                                    "name": "multiPolygon",
                                    "displayName": "MultiPolygon",
                                    "enumValue": "MultiPolygon"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "coordinates",
                        "schema": "string",
                        "writable": true
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:GeoSPARQL:Geometry;1",
                "@type": "Interface",
                "displayName": "Geometry",
                "description": "The class represents the top-level geometry type. This class is equivalent to the UML class GM_Object defined in ISO 19107, and it is superclass of all geometry types. GeoSPARQL 1.0 is an OGC Standard.Copyright (c) 2012 Open Geospatial Consortium.",
                "extends": "dtmi:digitaltwins:GeoSPARQL:SpatialObject;1",
                "contents": [],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:GeoSPARQL:SpatialObject;1",
                "@type": "Interface",
                "displayName": "Spatial Object",
                "description": "Spatial-object represents everything that can have a spatial representation. It is superclass of feature and geometry. GeoSPARQL 1.0 is an OGC Standard.Copyright (c) 2012 Open Geospatial Consortium.",
                "contents": [
                    {
                        "@type": "Relationship",
                        "name": "Contains",
                        "target": "dtmi:digitaltwins:GeoSPARQL:SpatialObject;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "Within",
                        "target": "dtmi:digitaltwins:GeoSPARQL:SpatialObject;1"
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Streetlight;1",
                "@type": "Interface",
                "displayName": "Streetlight",
                "description": "A Street light. Adapted from https://github.com/smart-data-models/dataModel.Streetlighting/tree/master/Streetlight data model",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Relationship",
                        "name": "refStreetlightModel",
                        "description": "Streetlight's model.",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:StreetlightModel;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refStreetlightControlCabinet",
                        "description": "If this streetlight is individually controlled, reference to the control cabinet in charge of.",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:StreetlightControlCabinet;1"
                    },
                    {
                        "@type": "Property",
                        "name": "circuit",
                        "description": "The circuit to which this streetlight connects to and gets power from. Typically it will contain an identifier that will allow to obtain more information about such circuit.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "status",
                        "description": "The overall status of this street light. Enum:'brokenLantern, columnIssue, defectiveLamp, ok'",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "ok",
                                    "displayName": "ok",
                                    "enumValue": "ok"
                                },
                                {
                                    "name": "defectiveLamp",
                                    "displayName": "defectiveLamp",
                                    "enumValue": "defectiveLamp"
                                },
                                {
                                    "name": "columnIssue",
                                    "displayName": "columnIssue",
                                    "enumValue": "columnIssue"
                                },
                                {
                                    "name": "brokenLantern",
                                    "displayName": "brokenLantern",
                                    "enumValue": "brokenLantern"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "powerState",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "on",
                                    "displayName": "on",
                                    "enumValue": "on"
                                },
                                {
                                    "name": "off",
                                    "displayName": "off",
                                    "enumValue": "off"
                                },
                                {
                                    "name": "low",
                                    "displayName": "low",
                                    "enumValue": "low"
                                },
                                {
                                    "name": "bootingUp",
                                    "displayName": "bootingUp",
                                    "enumValue": "bootingUp"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refDevice",
                        "description": "Reference to the device(s) used to monitor this streetligth. List of Reference to entity(ies) of type Device.",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:Device;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refStreetlightGroup",
                        "description": "Streetlight's group, if this streetlight belongs to any group.",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:StreetlightGroup;1"
                    },
                    {
                        "@type": "Property",
                        "name": "dateLastLampChange",
                        "writable": true,
                        "schema": "dateTime"
                    },
                    {
                        "@type": "Property",
                        "name": "dateLastSwitchingOn",
                        "writable": true,
                        "schema": "dateTime"
                    },
                    {
                        "@type": "Property",
                        "name": "dateLastSwitchingOff",
                        "writable": true,
                        "schema": "dateTime"
                    },
                    {
                        "@type": "Property",
                        "name": "controllingMethod",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "group",
                                    "displayName": "group",
                                    "enumValue": "group"
                                },
                                {
                                    "name": "individual",
                                    "displayName": "individual",
                                    "enumValue": "individual"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateServiceStarted",
                        "writable": true,
                        "schema": "dateTime"
                    },
                    {
                        "@type": "Property",
                        "name": "Image",
                        "description": "Model:'https://schema.org/image'. A URL containing a photo of the streetlight",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "annotations",
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "lanternHeight",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "illuminanceLevel",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "locationCategory",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "facade",
                                    "displayName": "Facade",
                                    "enumValue": "facade"
                                },
                                {
                                    "name": "sidewalk",
                                    "displayName": "SideWalk",
                                    "enumValue": "sidewalk"
                                },
                                {
                                    "name": "pedestrianPath",
                                    "displayName": "PedestrianPath",
                                    "enumValue": "pedestrianPath"
                                },
                                {
                                    "name": "road",
                                    "displayName": "Road",
                                    "enumValue": "road"
                                },
                                {
                                    "name": "playground",
                                    "displayName": "PlayGround",
                                    "enumValue": "playground"
                                },
                                {
                                    "name": "park",
                                    "displayName": "Park",
                                    "enumValue": "park"
                                },
                                {
                                    "name": "garden",
                                    "displayName": "Garden",
                                    "enumValue": "garden"
                                },
                                {
                                    "name": "bridge",
                                    "displayName": "Bridge",
                                    "enumValue": "bridge"
                                },
                                {
                                    "name": "tunnel",
                                    "displayName": "Tunnel",
                                    "enumValue": "tunnel"
                                },
                                {
                                    "name": "parking",
                                    "displayName": "Parking",
                                    "enumValue": "parking"
                                },
                                {
                                    "name": "centralIsland",
                                    "displayName": "CentralIslan",
                                    "enumValue": "centralIsland"
                                }
                            ]
                        },
                        "writable": true
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:StreetlightControlCabinet;1",
                "@type": "Interface",
                "displayName": "StreetlightControlCabinet",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "serialNumber",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refStreetlightGroup",
                        "description": "Streetlight group(s) controlled. List of references to entities of type StreetlightGroup",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:StreetlightGroup;1"
                    },
                    {
                        "@type": "Property",
                        "name": "brandName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "modelName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "manufacturerName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "cupboardMadeOf",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "plastic",
                                    "displayName": "plastic",
                                    "enumValue": "plastic"
                                },
                                {
                                    "name": "metal",
                                    "displayName": "metal",
                                    "enumValue": "metal"
                                },
                                {
                                    "name": "concrete",
                                    "displayName": "concrete",
                                    "enumValue": "concrete"
                                },
                                {
                                    "name": "other",
                                    "displayName": "other",
                                    "enumValue": "other"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "features",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "astronomicalClock",
                                    "displayName": "astronomicalClock",
                                    "enumValue": "astronomicalClock"
                                },
                                {
                                    "name": "individualControl",
                                    "displayName": "individualControl",
                                    "enumValue": "individualControl"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "compliantWith",
                        "description": "A list of standards to which the cabinet controller is compliant with (ex. IP54)",
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "annotations",
                        "description": "A field reserved for annotations (incidences, remarks, etc.)",
                        "schema": "string"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refDevice",
                        "description": "Reference to the device(s) used to monitor this control cabinet.",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:device;1"
                    },
                    {
                        "@type": "Property",
                        "name": "dateServiceStarted",
                        "writable": true,
                        "schema": "dateTime"
                    },
                    {
                        "@type": "Property",
                        "name": "dateLastProgramming",
                        "writable": true,
                        "schema": "dateTime"
                    },
                    {
                        "@type": "Property",
                        "name": "nextActuationDeadline",
                        "writable": true,
                        "schema": "dateTime"
                    },
                    {
                        "@type": "Property",
                        "name": "responsible",
                        "description": "Responsible for the cabinet controller, i.e. entity in charge of actuating (programming, etc.).",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "workingMode",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "automatic",
                                    "displayName": "automatic",
                                    "enumValue": "automatic"
                                },
                                {
                                    "name": "manual",
                                    "displayName": "manual",
                                    "enumValue": "manual"
                                },
                                {
                                    "name": "semiautomatic",
                                    "displayName": "semiautomatic",
                                    "enumValue": "semiautomatic"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "maximumPowerAvailable",
                        "description": "The maximum power available (by contract) for the circuits controlled by this cabinet. Units:'Kilowatts (kW)'",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "energyConsumed",
                        "description": "Energy consumed by the circuits controlled since metering started (since dateMeteringStarted). Units:'Kilowatts per hour (kWh).",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "energyCost",
                        "description": "Cost of the energy consumed by the circuits controlled since the metering start date.",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "reactiveEnergyConsumed",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "dateMeteringStarted",
                        "writable": true,
                        "schema": "dateTime"
                    },
                    {
                        "@type": "Property",
                        "name": "lastMeterReading",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "meterReadingPeriod",
                        "writable": true,
                        "schema": "integer"
                    },
                    {
                        "@type": "Property",
                        "name": "frequency",
                        "writable": true,
                        "schema": "integer"
                    },
                    {
                        "@type": "Property",
                        "name": "totalActivePower",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "totalReactivePower",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "activePowerR",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "activePowerS",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "activePowerT",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "reactivePowerR",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "reactivePowerS",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "reactivePowerT",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "powerFactorR",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "powerFactorS",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "powerFactorT",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "cosPhi",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "intensityR",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "intensityS",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "voltageR",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "voltageS",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "voltageT",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "thdrVoltageR",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "thdrVoltageS",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "thdrVoltageT",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "thdrIntensityR",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "thdrIntensityS",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "thdrIntensityT",
                        "writable": true,
                        "schema": "double"
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:StreetlightGroup;1",
                "@type": "Interface",
                "displayName": "StreetlightGroup",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Relationship",
                        "name": "refStreetLight",
                        "description": "Relationship. List of streetlight entities belonging to this group. List of references to entities for type Streetlight. Allowed values: There must topographical integrity between the location of the group and of the individual streetlights.",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:Streetlight;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refStreetlightControlCabinet",
                        "description": "Streetlight group's control cabinet",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:StreetlightControlCabinet;1"
                    },
                    {
                        "@type": "Property",
                        "name": "powerState",
                        "description": "Streetlight group's power state. Enum:'on, off, low, bootingUp'.",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "on",
                                    "displayName": "ON",
                                    "enumValue": "on"
                                },
                                {
                                    "name": "off",
                                    "displayName": "OFF",
                                    "enumValue": "off"
                                },
                                {
                                    "name": "low",
                                    "displayName": "LOW",
                                    "enumValue": "low"
                                },
                                {
                                    "name": "bootingUp",
                                    "displayName": "BootingUp",
                                    "enumValue": "bootingUp"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateLastSwitchingOn",
                        "writable": true,
                        "schema": "dateTime"
                    },
                    {
                        "@type": "Property",
                        "name": "dateLastSwitchingOff",
                        "writable": true,
                        "schema": "dateTime"
                    },
                    {
                        "@type": "Property",
                        "name": "switchingOnHours",
                        "schema": {
                            "@type": "Object",
                            "fields": [
                                {
                                    "name": "from",
                                    "schema": "string"
                                },
                                {
                                    "name": "to",
                                    "schema": "string"
                                },
                                {
                                    "name": "hours",
                                    "schema": "string"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "switchingMode",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "nightON",
                                    "displayName": "night-ON",
                                    "enumValue": "nightON"
                                },
                                {
                                    "name": "nightOFF",
                                    "displayName": "night-OFF",
                                    "enumValue": "nightOFF"
                                },
                                {
                                    "name": "nightLOW",
                                    "displayName": "night-LOW",
                                    "enumValue": "nightLOW"
                                },
                                {
                                    "name": "alwaysON",
                                    "displayName": "always-ON",
                                    "enumValue": "alwaysON"
                                },
                                {
                                    "name": "dayON",
                                    "displayName": "day-ON",
                                    "enumValue": "dayON"
                                },
                                {
                                    "name": "dayOFF",
                                    "displayName": "day-OFF",
                                    "enumValue": "dayOFF"
                                },
                                {
                                    "name": "dayLOW",
                                    "displayName": "day-LOW",
                                    "enumValue": "dayLOW"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "illuminanceLevel",
                        "description": "Relative illuminance level setting for the group. Allowed values: A number between 0 and 1.",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "activeProgramId",
                        "description": "Identifier of the active program for this streetlight group.",
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "annotations",
                        "schema": "string"
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:StreetlightModel;1",
                "@type": "Interface",
                "displayName": "StreetlightModel",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "maxPowerConsumption",
                        "description": "Maximum power consumption supported by the lantern. Units:'Watts (W)'.",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "minPowerConsumption",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "columnBrandName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "columnModelName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "columnManufacturerName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "columnMadeOf",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "steel",
                                    "displayName": "steel",
                                    "enumValue": "steel"
                                },
                                {
                                    "name": "aluminium",
                                    "displayName": "aluminium",
                                    "enumValue": "aluminium"
                                },
                                {
                                    "name": "wood",
                                    "displayName": "wood",
                                    "enumValue": "wood"
                                },
                                {
                                    "name": "other",
                                    "displayName": "other",
                                    "enumValue": "other"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "columnColor",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "lanternModelName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "lanternBrandName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "lanternManufacturerName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "lanternWeight",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "lampModelName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "lampBrandName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "lampManufacturerName",
                        "writable": true,
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "lampWeight",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "workingLife",
                        "writable": true,
                        "schema": "integer"
                    },
                    {
                        "@type": "Property",
                        "name": "lampTechnology",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "LED",
                                    "displayName": "LED",
                                    "enumValue": "LED"
                                },
                                {
                                    "name": "LPS",
                                    "displayName": "LPS",
                                    "enumValue": "LPS"
                                },
                                {
                                    "name": "HPS",
                                    "displayName": "HPS",
                                    "enumValue": "HPS"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "colorTemperature",
                        "description": "Correlated color temperature of the lamp. Units:'Kelvin degrees (K)'",
                        "writable": true,
                        "schema": "integer"
                    },
                    {
                        "@type": "Property",
                        "name": "colorRenderingIndex",
                        "description": "Color rendering index of the lamp.",
                        "writable": true,
                        "schema": "integer"
                    },
                    {
                        "@type": "Property",
                        "name": "luminousFlux",
                        "description": "Maximum light output which can be provided by the lamp. Units:'Lumens (lm)'.",
                        "writable": true,
                        "schema": "integer"
                    },
                    {
                        "@type": "Property",
                        "name": "powerConsumption",
                        "writable": true,
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "compliantWith",
                        "description": "A list of standards to which this streetlight model is compliant with.",
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "category",
                        "writable": true,
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "postTop",
                                    "displayName": "postTop",
                                    "enumValue": "postTop"
                                },
                                {
                                    "name": "bollard",
                                    "displayName": "bollard",
                                    "enumValue": "bollard"
                                },
                                {
                                    "name": "lamppost",
                                    "displayName": "lampost",
                                    "enumValue": "lamppost"
                                },
                                {
                                    "name": "lightTower",
                                    "displayName": "lightTower",
                                    "enumValue": "lightTower"
                                },
                                {
                                    "name": "flashingBeacon",
                                    "displayName": "FlashingBeacon",
                                    "enumValue": "flashingBeacon"
                                },
                                {
                                    "name": "sideEntry",
                                    "displayName": "sideEntry",
                                    "enumValue": "sideEntry"
                                },
                                {
                                    "name": "signLight",
                                    "displayName": "signLight",
                                    "enumValue": "signLight"
                                },
                                {
                                    "name": "ornamentLantern",
                                    "displayName": "ornamentLantern",
                                    "enumValue": "ornamentLantern"
                                }
                            ]
                        }
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:BoatAuthorized;1",
                "@type": "Interface",
                "displayName": "Boat Authorized",
                "description": "The data model is intended to provide information on the boats authorized to operate within the port according to the ISO 8666 standard for Boat Category. This repository is created by type of category of boat (pleasure craft, trade, passengers, ...). For each type of category, a list of optional subtypes of category can be associated.",
                "comment": "Original source: https://github.com/smart-data-models/dataModel.Ports/blob/master/BoatAuthorized/doc/spec.md",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "boatType",
                        "displayName": "Boat type",
                        "description": "A unique value of the list. Enum:'cargo, fishing, historic, passenger, specialist, Tanker, war, yachting'",
                        "comment": "Required property",
                        "schema": {
                            "@type": "Enum",
                            "displayName": "Boat type",
                            "description": "A unique value of the list. Enum:'cargo, fishing, historic, passenger, specialist, Tanker, war, yachting'",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "cargo",
                                    "displayName": "Cargo",
                                    "enumValue": "cargo"
                                },
                                {
                                    "name": "fishing",
                                    "displayName": "Fishing",
                                    "enumValue": "fishing"
                                },
                                {
                                    "name": "historic",
                                    "displayName": "Historic",
                                    "enumValue": "historic"
                                },
                                {
                                    "name": "passenger",
                                    "displayName": "Passenger",
                                    "enumValue": "passenger"
                                },
                                {
                                    "name": "specialist",
                                    "displayName": "Specialist",
                                    "enumValue": "specialist"
                                },
                                {
                                    "name": "tanker",
                                    "displayName": "Tanker",
                                    "enumValue": "Tanker"
                                },
                                {
                                    "name": "war",
                                    "displayName": "War",
                                    "enumValue": "war"
                                },
                                {
                                    "name": "yachting",
                                    "displayName": "Yachting",
                                    "enumValue": "yachting"
                                }
                            ]
                        }
                    },
                    {
                        "@type": "Property",
                        "name": "boatSubType",
                        "displayName": "Boat subtype",
                        "description": "Sub Type for a boatType. A combination of the elements 'aircraftCarrier, amphibiousAssaultShip, anchorHandlingVessel, artisanVessel, bac, barge, bargeCarrier, bulkCarrier, buoyTenderBoat, butaneCarrier, cableLayer, canoe, caravel, cargoCarrier, carrack, catamaran, chemicalCarrier, clipper, coastalFerry, cog, containerCarrier, corvette, craneBarge, crudeCarrier, cruise, cruiser, destroyer, dhow, divingVessel, djong, dredger, drifter, drillRig, factoryShip, ferry, fireBoat, fisheriesResearchVessel,...'",
                        "comment": "Required property. Since DTDLv2 doesn't support arrays for Properties, a single string will be used. Attention. Not all enum values are listed in the description",
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "dateLastReported",
                        "displayName": "Last reported date",
                        "description": "Last time data were gathered",
                        "comment": "Required property",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refSeaPort",
                        "description": "Port that belongs to",
                        "displayName": "belongs to",
                        "comment": "Required relationship",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:SeaportFacilities;1",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refPointOfInterest",
                        "description": "Point of Interest that the element has relation to",
                        "displayName": "related to",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:PointOfInterest;1",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "displayName": "Area served",
                        "description": "The geographic area where a service or offered item is provided",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "maxDraft",
                        "description": "Maximum draft allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes . For instance, MTR represents Meter",
                        "schema": "double",
                        "displayName": "Maximum draft allowed",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "maxLength",
                        "displayName": "Maximum length allowed",
                        "description": "Maximum length allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes. For instance, MTR represents Meter",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "minLength",
                        "displayName": "Minimum Length",
                        "description": "Minimum length allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes. For instance, MTR represents Meter",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "maxWidth",
                        "displayName": "Maximum width allowed",
                        "description": "Maximum width allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes . For instance, MTR represents Meter",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Mass"],
                        "name": "maxTonnage",
                        "displayName": "Maximum Tonnage",
                        "description": "Maximum tonnage authorized to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes . For instance, TNE represents Tonne Metric",
                        "schema": "double",
                        "unit": "tonne",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "openingHoursSpecification",
                        "displayName": "Opening hours",
                        "description": "A structured value providing information about the opening hours of a place or a certain service inside a place.",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:OpeningHourSpecification;1"
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:BoatPlacePricing;1",
                "@type": "Interface",
                "displayName": "Boat Place pricing",
                "description": "Global description: Work in progress for boat place pricing. Bases on sample at https://github.com/smart-data-models/dataModel.Ports/blob/master/BoatPlacesPricing/examples/example.json",
                "comment": "No official specification available yet",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "displayName": "Area served",
                        "description": "The geographic area where a service or offered item is provided",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateLastReported",
                        "displayName": "Date last reported",
                        "description": "The date and time of this report in ISO8601 UTC format. It can be represented by a specific time instant or by an ISO8601 interval",
                        "comment": "Required property",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refSeaPort",
                        "description": "Port that belongs to",
                        "displayName": "belongs to",
                        "comment": "Required relationship",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:SeaportFacilities;1",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refPointOfInterest",
                        "description": "Point of Interest that the element has relation to",
                        "displayName": "related to",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:PointOfInterest;1",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "spotCategoryRange",
                        "displayName": "Spot category range",
                        "description": "List from the lowest to the highest categories: A combination of the items listed. Enum:'A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T1, T2, U, V, W, X, Y, Z, Z01, Z02, Z03, Z04, Z05, Z06, Z07, Z08, Z08, Z09, Z10, Z11, Z12, Z13, Z14, Z15, Z16, Z17'",
                        "comment": "Required property. Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "maxDraft",
                        "description": "Maximum draft allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes . For instance, MTR represents Meter",
                        "schema": "double",
                        "displayName": "Maximum draft allowed",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "maxLength",
                        "displayName": "Maximum length allowed",
                        "description": "Maximum length allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes. For instance, MTR represents Meter",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "minLength",
                        "displayName": "Minimum Length",
                        "description": "Minimum length allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes. For instance, MTR represents Meter",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "maxWidth",
                        "displayName": "Maximum width allowed",
                        "description": "Maximum width allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes . For instance, MTR represents Meter",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "validFrom",
                        "displayName": "Valid from",
                        "comment": "Required property",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "validThrough",
                        "displayName": "Valid through",
                        "comment": "Required property",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "period",
                        "displayName": "Period",
                        "description": "Property. Model:'https://schema.org/DateTime'. Type of period defined the date From and Through: A free text or a unique value of the different combination allowed 'season / offSeason' - 'summer / winter' - 'low / medium / high'. enum:'high, low, medium, offSeason, season, summer, winter'",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "passage",
                        "displayName": "Passage",
                        "description": "Ticket price of the place for passing boats for this category / period. A structured value with 3 subproperties where each items is a string in the format `key` : `price` in Euro €",
                        "schema": {
                            "@type": "Object",
                            "fields": [
                                {
                                    "name": "day",
                                    "schema": "double"
                                },
                                {
                                    "name": "week",
                                    "schema": "double"
                                },
                                {
                                    "name": "month",
                                    "schema": "double"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "resident",
                        "displayName": "Resident",
                        "description": "Ticket price of the place for resident boats for this category / period. A structured value with 2 subproperties where each items is a string in the format `key` : `price` in Euro €",
                        "schema": {
                            "@type": "Object",
                            "fields": [
                                {
                                    "name": "month",
                                    "schema": "double"
                                },
                                {
                                    "name": "annual",
                                    "schema": "double"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "wintering",
                        "displayName": "Wintering",
                        "description": "Ticket price of the place for wintering boats for this category / period. A structured value with 3 subproperties where each items is a string in the format `key` : `price` in Euro €",
                        "schema": {
                            "@type": "Object",
                            "fields": [
                                {
                                    "name": "day",
                                    "schema": "double"
                                },
                                {
                                    "name": "week",
                                    "schema": "double"
                                },
                                {
                                    "name": "month",
                                    "schema": "double"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "fairing",
                        "displayName": "Fairing",
                        "description": "Ticket price of the place for fairing boats for this category / period. A structured value with 3 subproperties where each items is a string in the format `key` : `price` in Euro €",
                        "schema": {
                            "@type": "Object",
                            "fields": [
                                {
                                    "name": "day",
                                    "schema": "double"
                                },
                                {
                                    "name": "week",
                                    "schema": "double"
                                },
                                {
                                    "name": "month",
                                    "schema": "double"
                                }
                            ]
                        },
                        "writable": true
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:BoatPlacesAvailable;1",
                "@type": "Interface",
                "displayName": "Boat Places available",
                "description": "Global description: The purpose of the data model is to provide information on the availability of mooring rings for boats in the port by category. The information received relates only to pleasure boats and excludes commercial and passenger transport boats. The information on the Spot categories for boats is taken from the ISO 8666 standard.",
                "comment": "Original source: https://github.com/smart-data-models/dataModel.Ports/blob/master/BoatPlacesAvailable/doc/spec.md",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "displayName": "Area served",
                        "description": "The geographic area where a service or offered item is provided",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "availableSpotNumber",
                        "displayName": "Available spot number",
                        "description": "Number of places available in the port for this category",
                        "comment": "Required property",
                        "schema": "integer",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateObserved",
                        "displayName": "Date observed",
                        "description": "The date and time of this observation in ISO8601 UTC format. It can be represented by a specific time instant or by an ISO8601 interval",
                        "comment": "Required property",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "maxDraft",
                        "description": "Maximum draft allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes . For instance, MTR represents Meter",
                        "schema": "double",
                        "displayName": "Maximum draft allowed",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "maxLength",
                        "displayName": "Maximum length allowed",
                        "description": "Maximum length allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes. For instance, MTR represents Meter",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "minLength",
                        "displayName": "Minimum Length",
                        "description": "Minimum length allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes. For instance, MTR represents Meter",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "maxWidth",
                        "displayName": "Maximum width allowed",
                        "description": "Maximum width allowed to access the harbor. The unit code (text) is given using the UN/CEFACT Common Codes . For instance, MTR represents Meter",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refSeaPort",
                        "description": "Port that belongs to",
                        "displayName": "belongs to",
                        "comment": "Required relationship",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:SeaportFacilities;1",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refPointOfInterest",
                        "description": "Point of Interest that the element has relation to",
                        "displayName": "related to",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:PointOfInterest;1",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "spotCategoryRange",
                        "displayName": "Spot category range",
                        "description": "List from the lowest to the highest categories: A combination of the items listed. Enum:'A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T1, T2, U, V, W, X, Y, Z, Z01, Z02, Z03, Z04, Z05, Z06, Z07, Z08, Z08, Z09, Z10, Z11, Z12, Z13, Z14, Z15, Z16, Z17'",
                        "comment": "Required property. Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "totalCapacitySpotNumber",
                        "displayName": "Total capacity spot number",
                        "description": "Total Capacity of Spot in the port for this range",
                        "schema": "integer",
                        "writable": true
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:SeaportFacilities;1",
                "@type": "Interface",
                "displayName": "Seaport Facilities",
                "description": "Global description: The Data Model is intended to provide information about ports that can accommodate pleasure craft, commerce or passenger transport. It permit to represent the parameters of each port, its location, its mooring capacities and the free or paid services associated with it provided directly by the port or by professionals working on or near the port.",
                "comment": "Original source: https://github.com/smart-data-models/dataModel.Ports/blob/master/SeaportFacilities/doc/spec.md",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "displayName": "Area served",
                        "description": "The geographic area where a service or offered item is provided",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "authorizedPropulsion",
                        "displayName": "Authorized propulsion",
                        "description": "A Type of propulsions authorized to enter in the harbor. A combination of motor, sail, electric, oar, nuclear, lng, lpg, other",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "boatSupplyingServices",
                        "displayName": "Boat supplying services",
                        "description": "Description of the complementary supplying services for the boat offered by professionals working on or near the harbor. A combination of guarding, fuelStation, fuelTankerTruck , drinkingWaterTankerTruck, provisioning, dryFairing, waterFairing, repair, expertise, gangways, liftingCranes, towing, wasteWaterPumping, boatConveying, boatTransfer, other",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "contactPoint",
                        "displayName": "Contact point",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:ContactPoint;1"
                    },
                    {
                        "@type": "Property",
                        "name": "contractingAuthority",
                        "displayName": "Contracting authority",
                        "description": "Name of the contracting authority",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "contractingCompany",
                        "displayName": "Contracting company",
                        "description": "The Contracting Company responsible of the management of the port.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "currencyAccepted",
                        "displayName": "Currency accepted",
                        "description": " A combination of a list of active codes defined in the model Norme ISO 4217, Crypto Currencies , [Exchange Trading System](https://en.wikipedia.org/wiki/Local_exchange_trading_system",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateLastReported",
                        "displayName": "Date last reported",
                        "description": "The date and time of this report in ISO8601 UTC format. It can be represented by a specific time instant or by an ISO8601 interval",
                        "comment": "Required property",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "electricTransport",
                        "displayName": "Electric transport",
                        "description": "List of the different types of electric transport proposed by the city. A combination of electricCar, electricBycicle, electricMotorBike, electricScooter",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "facilities",
                        "displayName": "Facilities",
                        "description": "Description of the proposed facilities on the harbor. A combination of : toilets, showers, laundry, telephone, dustbins, dumpsters, container, selectiveSortingWaste, electricTerminal, waterTerminal, indoorRoomReservation, wifi, other",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "maxDraft",
                        "displayName": "Maximum Draft [MTR]",
                        "description": "A Maximum draft allowed to access the harbor",
                        "schema": "double",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "maxLength",
                        "displayName": "Maximum Length",
                        "description": "A Maximum length allowed to access the harbor",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "minLength",
                        "displayName": "Minimum Length",
                        "description": "A Minimum length allowed to access the harbor",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "maxWidth",
                        "displayName": "Maximum Width",
                        "description": "A Maximum width allowed to access the harbor",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Mass"],
                        "name": "maxTonnage",
                        "displayName": "Maximum Tonnage",
                        "description": "Maximum tonnage authorized to access the harbor",
                        "schema": "double",
                        "unit": "tonne",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "nearbyServices",
                        "displayName": "Nearby services",
                        "description": "Description of the additional services on the geographical area on or near the harbor. A combination of :touristOffice, fittingsStores, travelAgency, exchangeOffice, medicalOffice, pharmacy, groceryStores, restaurants, presses, bar, shops, seaExcursions, cityTour, touristicExcursions, others",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "numberOfPlace",
                        "displayName": "Number of places",
                        "description": "Total number of place in the harbor.",
                        "schema": "integer",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "openingHoursSpecification",
                        "displayName": "Opening hours",
                        "description": "A structured value providing information about the opening hours of a place or a certain service inside a place.",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:OpeningHourSpecification;1"
                    },
                    {
                        "@type": "Property",
                        "name": "paymentAccepted",
                        "displayName": "Payment accepted",
                        "description": "Accepted payment. A combination of a list of active codes defined in the model : Cash, CreditCard, CryptoCurrency, other",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "portServicesProvided",
                        "displayName": "Port services provided",
                        "description": "Description of the services provided directly by the harbor. A combination of : harborOffice, weather, customsServices, porters, boatRingRental, mooringAssistance, handlingAssistance, publicWifi, privateWifi, other",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refBoatAuthorized",
                        "displayName": "authorizes",
                        "description": "Reference to a list of Entity.",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:BoatAuthorized;1",
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refBoatPlaceAvailable",
                        "displayName": "has places available",
                        "description": "Reference to a list of Entity.",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:BoatPlacesAvailable;1",
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refBoatPlacePricing",
                        "displayName": "priced by",
                        "description": "Reference to a list of Entity.",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:BoatPlacePricing;1",
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refDevice",
                        "displayName": "has main device",
                        "description": "Reference to the Main Entity Device if used as second link",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:Device;1",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refPointOfInterest",
                        "description": "Point of Interest that the element has relation to",
                        "displayName": "related to",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:PointOfInterest;1",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "rentalSaleServices",
                        "displayName": "Rental sale services",
                        "description": "ADescription of services provided by professional sales or rental agencies on the geographical area on or near the harbor. A combination of : boatRental, boatSale, jetSkiRental, jetSkiSale, carRental, luxuryCarRental, vanRental, bikeRental, scooterRental, Caddie, palletTransport, other",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "routeType",
                        "displayName": "Route type",
                        "description": "List of the different types of urban transport Mode (Metro, Bus, Tram, ...) from the urban transport Mode GFTS standard STOP. A combination of values composed only of the attribute 'description' tram(0), metro(1), train(2), bus(3), ferry(4), cableTram(5), cableCar(6), funicular(7), trolleybus(11), monorail(12)",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "transportServices",
                        "displayName": "Transport services",
                        "description": "Description of the services provided for dedicated transport and shuttle services. A combination of : arking, shuttlesToAirport, shuttlesToRailway, internalShuttles, taxis, heliport, other",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "type",
                        "displayName": "Type",
                        "comment": "Required property",
                        "schema": "string",
                        "description": "It has to be 'SeaPort'"
                    },
                    {
                        "@type": "Property",
                        "name": "typeOfPort",
                        "displayName": "Type of port",
                        "description": "A Type of harbor. A combination of : marina, merchandise, cruise, ferry, passengers, yachting, fishing, military, river, other",
                        "comment": "Required property. Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "webSite",
                        "displayName": "Website",
                        "description": "Link to the official website of the harbor for more information.",
                        "schema": "string",
                        "writable": true
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Beach;1",
                "@type": "Interface",
                "displayName": "Beach",
                "description": "Global description: This entity contains a harmonised geographic description of a beach.",
                "comment": "Original source: https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/Beach/doc/spec.md",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "beachType",
                        "displayName": "Beach type",
                        "description": "Type of beach according to different criteria. Enum:'whiteSand, urban, isolated, calmWaters, blueFlag, Q-Quality, strongWaves, windy, blackSand'. Or any other value needed by an application.",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "occupationRate",
                        "displayName": "Occupation rate",
                        "description": "Typical occupation rate of this beach. Enum:'low, medium, high'",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "low",
                                    "displayName": "Low",
                                    "enumValue": "low"
                                },
                                {
                                    "name": "medium",
                                    "displayName": "Medium",
                                    "enumValue": "medium"
                                },
                                {
                                    "name": "high",
                                    "displayName": "High",
                                    "enumValue": "high"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "facilities",
                        "displayName": "Facilities",
                        "description": "Describes different facilities offered by this beach. Enum:'promenade, showers, cleaningServices, lifeGuard, sunshadeRental, sunLoungerRental, waterCraftRental, toilets, touristOffice, litterBins, telephone,surfPracticeArea, accessforDisabled'",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "accessType",
                        "displayName": "Access type",
                        "description": "Enum:'privateVehicle, boat, onFoot, publicTransport'. Describes how to get to this beach.",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "displayName": "Area served",
                        "description": "The geographic area where a service or offered item is provided",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "length",
                        "displayName": "Length",
                        "description": "Length of this beach",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "width",
                        "displayName": "Width",
                        "description": "Width of this beach",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "refSeeAlso",
                        "displayName": "See also",
                        "description": "List of comma separated URLs to one or more related entities.",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Museum;1",
                "@type": "Interface",
                "displayName": "Museum",
                "description": "Global description: A museum",
                "comment": "Original source: https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/Museum/doc/spec.md",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "displayName": "Area served",
                        "description": "The geographic area where a service or offered item is provided",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "artPeriod",
                        "displayName": "Art period",
                        "description": "Allowed values:-Those defined by Wikipedia.- Any other extended value needed by an application and not described by the above resource.",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "buildingType",
                        "displayName": "Building type",
                        "description": "Type of building that hosts the museum. Enum:'prehistoricPlace, acropolis, alcazaba,aqueduct, alcazar, amphitheatre, arch, polularArchitecture,basilica, road, chapel, cartuja, nobleHouse, residence,castle, castro, catacombs, cathedral, cloister, convent,prehistoricCave, dolmen, officeBuilding, houseBuilding,industrialBuilding, militaryBuilding, hermitage, fortress,sculpturalGroups, church, garden, fishMarket, masia,masiaFortificada, minaret, monastery, monolith, walls,necropolis, menhir, mansion, ...'",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used. Attention. Not all enum values are listed in the description",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "contactPoint",
                        "displayName": "Contact point",
                        "description": "Contact point for the museum.",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:ContactPoint;1"
                    },
                    {
                        "@type": "Property",
                        "name": "facilities",
                        "displayName": "Facilities",
                        "description": "Describes different facilities offered by this museum. Enum:'elevator, cafeteria, shop, auditory,conferenceRoom, audioguide, cloakRoom, forDisabled, forBabies,guidedTour, restaurant, ramp, reservation'. or any other value needed by an application.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "featuredArtist",
                        "displayName": "Featured artist",
                        "description": "Main featured artist(s) at this museum.",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used. Attention. Not all enum values are listed in the description",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "historicalPeriod",
                        "displayName": "Historical period",
                        "description": "An ISO8601 time interval. For example 1920/1940. The second element of the interval can be left empty to denote 'till now'. A comma separated list of years, for instance 1620,1625,1718. - A century, represented by a year pattern, for instance 19xx would correspond to the twentieth century. And 196x would correspond to the sixties decade.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "museumType",
                        "displayName": "Museum type",
                        "description": "Type of museum according to the exhibited content. Enum:'appliedArts, scienceAndTechnology, fineArts,music, history, sacredArt, archaeology, specials,decorativeArts, literature, medicineAndPharmacy, maritime,transports, military, wax, popularArtsAndTraditions,numismatic, unesco, ceramics, sumptuaryArts, naturalScience,prehistoric, ethnology, railway, mining, textile, sculpture,multiDisciplinar, painting, paleonthology, modernArt,thematic, architecture, museumHouse, cathedralMuseum,...'",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used. Attention. Not all enum values are listed in the description",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "openingHoursSpecification",
                        "displayName": "Opening hours",
                        "description": "A structured value providing information about the opening hours of a place or a certain service inside a place.",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:OpeningHourSpecification;1"
                    },
                    {
                        "@type": "Property",
                        "name": "refSeeAlso",
                        "displayName": "See also",
                        "description": "List of comma separated URLs to one or more related entities.",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "touristArea",
                        "displayName": "Tourist area",
                        "description": "Tourist area at which this museum is located. Precise semantics might depend on the application or target country or region. For instance Costa del Sol.",
                        "schema": "string",
                        "writable": true
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:OpeningHourSpecification;1",
                "@type": "Interface",
                "displayName": "Opening hours specification",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "mondayOpening",
                        "displayName": "Opening hours on Monday",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:openinghoursForDay;1",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "tuesdayOpening",
                        "displayName": "Opening hours on Tuesday",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:openinghoursForDay;1",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "wednesdayOpening",
                        "displayName": "Opening hours on Wednesday",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:openinghoursForDay;1",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "thursdayOpening",
                        "displayName": "Opening hours on Thursday",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:openinghoursForDay;1",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "fridayOpening",
                        "displayName": "Opening hours on Friday",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:openinghoursForDay;1",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "saturdayOpening",
                        "displayName": "Opening hours on Saturday",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:openinghoursForDay;1",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "sundayOpening",
                        "displayName": "Opening hours on Sunday",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:openinghoursForDay;1",
                        "writable": true
                    }
                ],
                "schemas": [
                    {
                        "@id": "dtmi:digitaltwins:ngsi_ld:city:openinghoursForDay;1",
                        "@type": "Object",
                        "fields": [
                            {
                                "name": "opens",
                                "schema": "time"
                            },
                            {
                                "name": "closes",
                                "schema": "time"
                            },
                            {
                                "name": "dayOfWeek",
                                "schema": {
                                    "@type": "Enum",
                                    "valueSchema": "string",
                                    "enumValues": [
                                        {
                                            "name": "Monday",
                                            "enumValue": "Monday"
                                        },
                                        {
                                            "name": "Tuesday",
                                            "enumValue": "Tuesday"
                                        },
                                        {
                                            "name": "Wednesday",
                                            "enumValue": "Wednesday"
                                        },
                                        {
                                            "name": "Thursday",
                                            "enumValue": "Thursday"
                                        },
                                        {
                                            "name": "Friday",
                                            "enumValue": "Friday"
                                        },
                                        {
                                            "name": "Saturday",
                                            "enumValue": "Saturday"
                                        },
                                        {
                                            "name": "Sunday",
                                            "enumValue": "Sunday"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:PointOfInterest;1",
                "@type": "Interface",
                "displayName": "Point of Interest",
                "description": "Global description: This entity contains a harmonised geographic description of a Point of Interest",
                "comment": "Original source: https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/PointOfInterest/doc/spec.md",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "category",
                        "displayName": "Category",
                        "description": "Category of this point of interest. Allowed values: Those defined by the Factual taxonomy together with the extended categories described by the specification. For instance the value 113 corresponds to beaches, and the value 311 corresponds to museums.",
                        "comment": "Required property. Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "displayName": "Area served",
                        "description": "The geographic area where a service or offered item is provided",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "contactPoint",
                        "displayName": "Contact point",
                        "description": "Contact point for the point of interest, e.g. Museum",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:ContactPoint;1"
                    },
                    {
                        "@type": "Property",
                        "name": "refSeeAlso",
                        "displayName": "See also",
                        "description": "List of comma separated URLs to one or more related entities.",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Store;1",
                "@type": "Interface",
                "displayName": "Store",
                "description": "Global description: This entity Type models stores/shops in the city.",
                "comment": "Original source: https://github.com/smart-data-models/dataModel.PointOfInterest/blob/master/Store/doc/spec.md",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "displayName": "Area served",
                        "description": "The geographic area where a service or offered item is provided",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "category",
                        "displayName": "Category",
                        "description": "Category of the store. Enum:'AutoPartsStore,BikeStore,BookStore,ClothingStore,ComputerStore,ConvenienceStore,DepartmentStore,ElectronicsStore,Florist,FurnitureStore,GardenStore,GroceryStore,HardwareStore,HobbyShop,HomeGoodsStore,JewelryStore,LiquorStore,MensClothingStore,MobilePhoneStore,MovieRentalStore,MusicStore,OfficeEquipmentStore,OutletStore,PawnShop,PetStore,ShoeStore,SportingGoodsStore,TireShop,ToyStore,WholesaleStore'",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "currenciesAccepted",
                        "displayName": "Currencies accepted",
                        "description": "Currencies accepted in this store. It uses ISO 4217 currency format (e.g. USD, EUR)",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "email",
                        "displayName": "Email",
                        "description": "The email address of this store.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "logo",
                        "displayName": "Logo",
                        "description": "An associated logo for this store.",
                        "comment": "URL to the logo",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "openingHoursSpecification",
                        "displayName": "Opening hours",
                        "description": "A structured value providing information about the opening hours of a place or a certain service inside a place.",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:OpeningHourSpecification;1"
                    },
                    {
                        "@type": "Property",
                        "name": "paymentAccepted",
                        "displayName": "Payment accepted",
                        "description": "Payment method accepted in this store.",
                        "comment": "Since DTDLv2 doesn't support arrays for Properties, a single string will be used.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "telephone",
                        "displayName": "Telephone",
                        "description": "The telephone number of this store.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "url",
                        "displayName": "Website URL",
                        "description": "Website with information about the store.",
                        "schema": "string",
                        "writable": true
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:acceptedPaymentMethod;1",
                "@type": "Interface",
                "displayName": "AcceptedPaymentMethod",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "acceptedPaymentMethod",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "byBankTransferInAdvance",
                                    "displayName": "ByBankTransferInAdvance",
                                    "enumValue": "byBankTransferInAdvance"
                                },
                                {
                                    "name": "byInvoice",
                                    "displayName": "ByInvoice",
                                    "enumValue": "byInvoice"
                                },
                                {
                                    "name": "cash",
                                    "displayName": "Cash",
                                    "enumValue": "cash"
                                },
                                {
                                    "name": "checkInAdvance",
                                    "displayName": "CheckInAdvance",
                                    "enumValue": "checkInAdvance"
                                },
                                {
                                    "name": "COD",
                                    "displayName": "COD",
                                    "enumValue": "COD"
                                },
                                {
                                    "name": "directDebit",
                                    "displayName": "DirectDebit",
                                    "enumValue": "directDebit"
                                },
                                {
                                    "name": "GoogleCheckout",
                                    "displayName": "GoogleCheckout",
                                    "enumValue": "GoogleCheckout"
                                },
                                {
                                    "name": "PayPal",
                                    "displayName": "PayPal",
                                    "enumValue": "PayPal"
                                },
                                {
                                    "name": "PaySwarm",
                                    "displayName": "PaySwarm",
                                    "enumValue": "PaySwarm"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:allowedVehicleType;1",
                "@type": "Interface",
                "displayName": "AllowedVehicleType",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "allowedVehicleType",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "agriculturalVehicle",
                                    "displayName": "AgriculturalVehicle",
                                    "enumValue": "agriculturalVehicle"
                                },
                                {
                                    "name": "anyVehicle",
                                    "displayName": "AnyVehicle",
                                    "enumValue": "anyVehicle"
                                },
                                {
                                    "name": "bicycle",
                                    "displayName": "Bicycle",
                                    "enumValue": "bicycle"
                                },
                                {
                                    "name": "bus",
                                    "displayName": "Bus",
                                    "enumValue": "bus"
                                },
                                {
                                    "name": "car",
                                    "displayName": "Car",
                                    "enumValue": "car"
                                },
                                {
                                    "name": "caravan",
                                    "displayName": "Caravan",
                                    "enumValue": "caravan"
                                },
                                {
                                    "name": "carWithCaravan",
                                    "displayName": "CarWithCaravan",
                                    "enumValue": "carWithCaravan"
                                },
                                {
                                    "name": "carWithTrailer",
                                    "displayName": "CarWithTrailer",
                                    "enumValue": "carWithTrailer"
                                },
                                {
                                    "name": "constructionOrMaintenanceVehicle",
                                    "displayName": "ConstructionOrMaintenanceVehicle",
                                    "enumValue": "constructionOrMaintenanceVehicle"
                                },
                                {
                                    "name": "lorry",
                                    "displayName": "Lorry",
                                    "enumValue": "lorry"
                                },
                                {
                                    "name": "moped",
                                    "displayName": "Moped",
                                    "enumValue": "moped"
                                },
                                {
                                    "name": "motorcycle",
                                    "displayName": "Motorcycle",
                                    "enumValue": "motorcycle"
                                },
                                {
                                    "name": "motorcycleWithSideCar",
                                    "displayName": "MotorcycleWithSideCar",
                                    "enumValue": "motorcycleWithSideCar"
                                },
                                {
                                    "name": "motorscooter",
                                    "displayName": "Motorscooter",
                                    "enumValue": "motorscooter"
                                },
                                {
                                    "name": "tanker",
                                    "displayName": "Tanker",
                                    "enumValue": "tanker"
                                },
                                {
                                    "name": "trailer",
                                    "displayName": "Trailer",
                                    "enumValue": "trailer"
                                },
                                {
                                    "name": "van",
                                    "displayName": "Van",
                                    "enumValue": "van"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:areaServed;1",
                "@type": "Interface",
                "displayName": "AreaServed",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "schema": "string",
                        "writable": true
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:areBordersMarked;1",
                "@type": "Interface",
                "displayName": "AreBordersmarked",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "level",
                        "schema": "boolean"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:availableSpotNumber;1",
                "@type": "Interface",
                "displayName": "AvailableSpotNumber",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "availableSpotNumber",
                        "schema": "integer"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:averageSpotLength;1",
                "@type": "Interface",
                "displayName": "AverageSpotLength",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "averageSpotLength",
                        "schema": "double"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:averageSpotWidth;1",
                "@type": "Interface",
                "displayName": "AverageSpotWidth",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "averageSpotWidth",
                        "schema": "double"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:chargeType;1",
                "@type": "Interface",
                "displayName": "ChargeType",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "chargeType",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "additionalIntervalPrice",
                                    "displayName": "AdditionalIntervalPrice",
                                    "enumValue": "additionalIntervalPrice"
                                },
                                {
                                    "name": "annualPayment",
                                    "displayName": "AnnualPayment",
                                    "enumValue": "annualPayment"
                                },
                                {
                                    "name": "firstIntervalPrice",
                                    "displayName": "FirstIntervalPrice",
                                    "enumValue": "firstIntervalPrice"
                                },
                                {
                                    "name": "flat",
                                    "displayName": "Flat",
                                    "enumValue": "flat"
                                },
                                {
                                    "name": "free",
                                    "displayName": "Free",
                                    "enumValue": "free"
                                },
                                {
                                    "name": "minimum",
                                    "displayName": "Minimum",
                                    "enumValue": "minimum"
                                },
                                {
                                    "name": "maximum",
                                    "displayName": "Maximum",
                                    "enumValue": "maximum"
                                },
                                {
                                    "name": "monthlyPayment",
                                    "displayName": "MonthlyPayment",
                                    "enumValue": "monthlyPayment"
                                },
                                {
                                    "name": "seasonTicket",
                                    "displayName": "SeasonTicket",
                                    "enumValue": "seasonTicket"
                                },
                                {
                                    "name": "temporaryFee",
                                    "displayName": "TemporaryFee",
                                    "enumValue": "temporaryFee"
                                },
                                {
                                    "name": "temporaryPrice",
                                    "displayName": "TemporaryPrice",
                                    "enumValue": "temporaryPrice"
                                },
                                {
                                    "name": "unknown",
                                    "displayName": "Unknown",
                                    "enumValue": "unknown"
                                },
                                {
                                    "name": "other",
                                    "displayName": "Other",
                                    "enumValue": "other"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:extraSpotNumber;1",
                "@type": "Interface",
                "displayName": "ExtraSpotNumber",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "extraSpotNumber",
                        "schema": "integer"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:maximumAllowedHeight;1",
                "@type": "Interface",
                "displayName": "MaximumAllowedHeight",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "maximumAllowedHeight",
                        "schema": "double"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:maximumAllowedWidth;1",
                "@type": "Interface",
                "displayName": "MaximumAllowedWidth",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "maximumAllowedWidth",
                        "schema": "double"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:maximumParkingDuration;1",
                "@type": "Interface",
                "displayName": "MaximumParkingDuration",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "maximumParkingDuration",
                        "schema": "string"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:occupancyDetectionType;1",
                "@type": "Interface",
                "displayName": "OccupancyDetectionType",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "occupancyDetectionType",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "balancing",
                                    "displayName": "Balancing",
                                    "enumValue": "balancing"
                                },
                                {
                                    "name": "manual",
                                    "displayName": "Manual",
                                    "enumValue": "manual"
                                },
                                {
                                    "name": "modelBased",
                                    "displayName": "ModelBased",
                                    "enumValue": "modelBased"
                                },
                                {
                                    "name": "none",
                                    "displayName": "None",
                                    "enumValue": "none"
                                },
                                {
                                    "name": "singleSpaceDetection",
                                    "displayName": "SingleSpaceDetection",
                                    "enumValue": "singleSpaceDetection"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:parkingMode;1",
                "@type": "Interface",
                "displayName": "ParkingMode",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "parkingMode",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "echelonParking",
                                    "displayName": "EchelonParking",
                                    "enumValue": "echelonParking"
                                },
                                {
                                    "name": "parallelParking",
                                    "displayName": "ParallelParking",
                                    "enumValue": "parallelParking"
                                },
                                {
                                    "name": "perpendicularParking",
                                    "displayName": "perpendicularParking",
                                    "enumValue": "perpendicularParking"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:requiredPermit;1",
                "@type": "Interface",
                "displayName": "RequiredPermit",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "requiredPermit",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "employeePermit",
                                    "displayName": "EmployeePermit",
                                    "enumValue": "employeePermit"
                                },
                                {
                                    "name": "fairPermit",
                                    "displayName": "FairPermit",
                                    "enumValue": "fairPermit"
                                },
                                {
                                    "name": "governmentPermit",
                                    "displayName": "GovernmentPermit",
                                    "enumValue": "governmentPermit"
                                },
                                {
                                    "name": "noPermitNeeded",
                                    "displayName": "NoPermitNeeded",
                                    "enumValue": "noPermitNeeded"
                                },
                                {
                                    "name": "residentPermit",
                                    "displayName": "ResidentPermit",
                                    "enumValue": "residentPermit"
                                },
                                {
                                    "name": "specificIdentifiedVehiclePermit",
                                    "displayName": "SpecificIdentifiedVehiclePermit",
                                    "enumValue": "specificIdentifiedVehiclePermit"
                                },
                                {
                                    "name": "studentPermit",
                                    "displayName": "StudentPermit",
                                    "enumValue": "studentPermit"
                                },
                                {
                                    "name": "visitorPermit",
                                    "displayName": "VisitorPermit",
                                    "enumValue": "visitorPermit"
                                },
                                {
                                    "name": "disabledPermit",
                                    "displayName": "DisabledPermit",
                                    "enumValue": "disabledPermit"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:reservationType;1",
                "@type": "Interface",
                "displayName": "ReservationType",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "reservationType",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "mandatory",
                                    "displayName": "Mandatory",
                                    "enumValue": "mandatory"
                                },
                                {
                                    "name": "notAvailable",
                                    "displayName": "NotAvailable",
                                    "enumValue": "notAvailable"
                                },
                                {
                                    "name": "optional",
                                    "displayName": "Optional",
                                    "enumValue": "optional"
                                },
                                {
                                    "name": "partly",
                                    "displayName": "Partly",
                                    "enumValue": "partly"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:totalSpotNumber;1",
                "@type": "Interface",
                "displayName": "TotalSpotNumber",
                "@context": "dtmi:dtdl:context;2",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "totalSpotNumber",
                        "schema": "integer",
                        "writable": true
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:ParkingSpot;1",
                "@type": "Interface",
                "displayName": "ParkingSpot",
                "@context": "dtmi:dtdl:context;2",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "dateObserved",
                        "schema": "double",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "width",
                        "schema": "double",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "length",
                        "schema": "double",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "timeInstant",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "image",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "color",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "category",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "offStreet",
                                    "displayName": "Offstreet",
                                    "enumValue": "offStreet"
                                },
                                {
                                    "name": "onStreet",
                                    "displayName": "OnStreet",
                                    "enumValue": "onStreet"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "status",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "occupied",
                                    "displayName": "Occupied",
                                    "enumValue": "occupied"
                                },
                                {
                                    "name": "free",
                                    "displayName": "Free",
                                    "enumValue": "free"
                                },
                                {
                                    "name": "closed",
                                    "displayName": "Closed",
                                    "enumValue": "closed"
                                },
                                {
                                    "name": "unkown",
                                    "displayName": "Unkown",
                                    "enumValue": "unkown"
                                }
                            ]
                        }
                    },
                    {
                        "@type": "Component",
                        "name": "areaServed",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:areaServed;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refParkingGroup",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:ParkingGroup;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refOnStreetParking",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:OnStreetParking;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refOffStreetParking",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:OffStreetParking;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refdevice",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:Device;1"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:ParkingGroup;1",
                "@type": "Interface",
                "displayName": "ParkingGroup",
                "@context": "dtmi:dtdl:context;2",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "allowedVehicleType",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "bicycle",
                                    "displayName": "Bicycle",
                                    "enumValue": "bicycle"
                                },
                                {
                                    "name": "bus",
                                    "displayName": "Bus",
                                    "enumValue": "bus"
                                },
                                {
                                    "name": "car",
                                    "displayName": "Car",
                                    "enumValue": "car"
                                },
                                {
                                    "name": "caravan",
                                    "displayName": "Caravan",
                                    "enumValue": "caravan"
                                },
                                {
                                    "name": "motorcycle",
                                    "displayName": "Motorcycle",
                                    "enumValue": "motorcycle"
                                },
                                {
                                    "name": "motorscooter",
                                    "displayName": "Motorscooter",
                                    "enumValue": "motorscooter"
                                },
                                {
                                    "name": "truck",
                                    "displayName": "Truck",
                                    "enumValue": "truck"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "category",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "adjacentSpaces",
                                    "displayName": "AdjacentSpaces",
                                    "enumValue": "adjacentSpaces"
                                },
                                {
                                    "name": "blueZone",
                                    "displayName": "BlueZone",
                                    "enumValue": "blueZone"
                                },
                                {
                                    "name": "completeFloor",
                                    "displayName": "CompleteFloor",
                                    "enumValue": "completeFloor"
                                },
                                {
                                    "name": "free",
                                    "displayName": "Free",
                                    "enumValue": "free"
                                },
                                {
                                    "name": "feeCharged",
                                    "displayName": "FeeCharged",
                                    "enumValue": "feeCharged"
                                },
                                {
                                    "name": "greenZone",
                                    "displayName": "GreenZone",
                                    "enumValue": "greenZone"
                                },
                                {
                                    "name": "loadUnloadZone",
                                    "displayName": "LoadUnloadZone",
                                    "enumValue": "loadUnloadZone"
                                },
                                {
                                    "name": "nonAdjacentSpaces",
                                    "displayName": "NonAdjacentSpaces",
                                    "enumValue": "nonAdjacentSpaces"
                                },
                                {
                                    "name": "offStreet",
                                    "displayName": "OffStreet",
                                    "enumValue": "offStreet"
                                },
                                {
                                    "name": "onlyDisabled",
                                    "displayName": "OnlyDisabled",
                                    "enumValue": "onlyDisabled"
                                },
                                {
                                    "name": "onlyElectricalCharging",
                                    "displayName": "OnlyElectricalCharging",
                                    "enumValue": "onlyElectricalCharging"
                                },
                                {
                                    "name": "onlyResidents",
                                    "displayName": "OnlyResidents",
                                    "enumValue": "onlyResidents"
                                },
                                {
                                    "name": "onlyWithPermit",
                                    "displayName": "OnlyWithPermit",
                                    "enumValue": "onlyWithPermit"
                                },
                                {
                                    "name": "onStreet",
                                    "displayName": "OnStreet",
                                    "enumValue": "OnStreet"
                                },
                                {
                                    "name": "particularConditionsSpaces",
                                    "displayName": "ParticularConditionsSpaces",
                                    "enumValue": "particularConditionsSpaces"
                                },
                                {
                                    "name": "shortTermMediumTermLongTerm",
                                    "displayName": "ShortTermMediumTermLongTerm",
                                    "enumValue": "shortTermMediumTermLongTerm"
                                },
                                {
                                    "name": "statisticsOnly",
                                    "displayName": "StatisticsOnly",
                                    "enumValue": "statisticsOnly"
                                },
                                {
                                    "name": "vehicleTypeSpaces",
                                    "displayName": "VehicleTypeSpaces",
                                    "enumValue": "vehicleTypeSpaces"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "permitActiveHours",
                        "schema": {
                            "@type": "Map",
                            "mapKey": {
                                "name": "permit",
                                "schema": "string"
                            },
                            "mapValue": {
                                "name": "activeHours",
                                "schema": "string"
                            }
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "requiredPermit",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "areBordersMarked",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:areBordersMarked;1"
                    },
                    {
                        "@type": "Component",
                        "name": "availableSpotNumber",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:availableSpotNumber;1"
                    },
                    {
                        "@type": "Component",
                        "name": "averageSpotLength",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:averageSpotLength;1"
                    },
                    {
                        "@type": "Component",
                        "name": "averageSpotWidth",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:averageSpotWidth;1"
                    },
                    {
                        "@type": "Component",
                        "name": "maximumAllowedHeight",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:maximumAllowedHeight;1"
                    },
                    {
                        "@type": "Component",
                        "name": "maximumAllowedWidth",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:maximumAllowedWidth;1"
                    },
                    {
                        "@type": "Component",
                        "name": "maximumParkingDuration",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:maximumParkingDuration;1"
                    },
                    {
                        "@type": "Component",
                        "name": "occupancyDetectionType",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:occupancyDetectionType;1"
                    },
                    {
                        "@type": "Component",
                        "name": "parkingMode",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:parkingMode;1"
                    },
                    {
                        "@type": "Component",
                        "name": "reservationType",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:reservationType;1"
                    },
                    {
                        "@type": "Component",
                        "name": "chargeType",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:chargeType;1"
                    },
                    {
                        "@type": "Component",
                        "name": "totalSpotNumber",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:totalSpotNumber;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refOnStreetParking",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:OnStreetParking;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refOffStreetParking",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:OffStreetParking;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refParkingSpot",
                        "minMultiplicity": 0,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:ParkingSpot;1"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:OnStreetParking;1",
                "@type": "Interface",
                "displayName": "OnStreetParking",
                "@context": "dtmi:dtdl:context;2",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "category",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "blueZone",
                                    "displayName": "BlueZone",
                                    "enumValue": "blueZone"
                                },
                                {
                                    "name": "feeCharged",
                                    "displayName": "FeeCharged",
                                    "enumValue": "feeCharged"
                                },
                                {
                                    "name": "forDisabled",
                                    "displayName": "ForDisabled",
                                    "enumValue": "forDisabled"
                                },
                                {
                                    "name": "forElectricalCharging",
                                    "displayName": "ForElectricalCharging",
                                    "enumValue": "forElectricalCharging"
                                },
                                {
                                    "name": "forLoadUnload",
                                    "displayName": "ForLoadUnload",
                                    "enumValue": "forLoadUnload"
                                },
                                {
                                    "name": "forResidents",
                                    "displayName": "ForResidents",
                                    "enumValue": "forResidents"
                                },
                                {
                                    "name": "free",
                                    "displayName": "Free",
                                    "enumValue": "free"
                                },
                                {
                                    "name": "greenZone",
                                    "displayName": "GreenZone",
                                    "enumValue": "greenZone"
                                },
                                {
                                    "name": "mediumTerm",
                                    "displayName": "MediumTerm",
                                    "enumValue": "mediumTerm"
                                },
                                {
                                    "name": "onlyWithPermit",
                                    "displayName": "OnlyWithPermit",
                                    "enumValue": "onlyWithPermit"
                                },
                                {
                                    "name": "shortTerm",
                                    "displayName": "ShortTerm",
                                    "enumValue": "shortTerm"
                                },
                                {
                                    "name": "taxiStop",
                                    "displayName": "TaxiStop",
                                    "enumValue": "taxiStop"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "permitActiveHours",
                        "schema": {
                            "@type": "Map",
                            "mapKey": {
                                "name": "permit",
                                "schema": "string"
                            },
                            "mapValue": {
                                "name": "activeHours",
                                "schema": "string"
                            }
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "usageScenario",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "carSharing",
                                    "displayName": "CarSharing",
                                    "enumValue": "carSharing"
                                },
                                {
                                    "name": "dropOff",
                                    "displayName": "DropOff",
                                    "enumValue": "dropOff"
                                },
                                {
                                    "name": "kissAndRide",
                                    "displayName": "KissAndRide",
                                    "enumValue": "kissAndRide"
                                },
                                {
                                    "name": "liftShare",
                                    "displayName": "LiftShare",
                                    "enumValue": "liftShare"
                                },
                                {
                                    "name": "loadingBay",
                                    "displayName": "LoadingBay",
                                    "enumValue": "loadingBay"
                                },
                                {
                                    "name": "overnightParking",
                                    "displayName": "OvernightParking",
                                    "enumValue": "overnightParking"
                                },
                                {
                                    "name": "parkAndRide",
                                    "displayName": "ParkAndRide",
                                    "enumValue": "parkAndRide"
                                },
                                {
                                    "name": "parkAndCycle",
                                    "displayName": "ParkAndCycle",
                                    "enumValue": "parkAndCycle"
                                },
                                {
                                    "name": "parkAndWalk",
                                    "displayName": "ParkAndWalk",
                                    "enumValue": "parkAndWalk"
                                },
                                {
                                    "name": "vehicleLift",
                                    "displayName": "VehicleLift",
                                    "enumValue": "vehicleLift"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "maximumAllowedStay",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "areBordersMarked",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:areBordersMarked;1"
                    },
                    {
                        "@type": "Component",
                        "name": "availableSpotNumber",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:availableSpotNumber;1"
                    },
                    {
                        "@type": "Component",
                        "name": "averageSpotLength",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:averageSpotLength;1"
                    },
                    {
                        "@type": "Component",
                        "name": "averageSpotWidth",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:averageSpotWidth;1"
                    },
                    {
                        "@type": "Component",
                        "name": "maximumParkingDuration",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:maximumParkingDuration;1"
                    },
                    {
                        "@type": "Component",
                        "name": "occupancyDetectionType",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:occupancyDetectionType;1"
                    },
                    {
                        "@type": "Component",
                        "name": "parkingMode",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:parkingMode;1"
                    },
                    {
                        "@type": "Component",
                        "name": "acceptedPaymentMethod",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:acceptedPaymentMethod;1"
                    },
                    {
                        "@type": "Component",
                        "name": "allowedVehicleType",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:allowedVehicleType;1"
                    },
                    {
                        "@type": "Component",
                        "name": "areaServed",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:areaServed;1"
                    },
                    {
                        "@type": "Component",
                        "name": "chargeType",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:chargeType;1"
                    },
                    {
                        "@type": "Component",
                        "name": "extraSpotNumber",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:extraSpotNumber;1"
                    },
                    {
                        "@type": "Component",
                        "name": "requiredPermit",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:requiredPermit;1"
                    },
                    {
                        "@type": "Component",
                        "name": "totalSpotNumber",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:totalSpotNumber;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refParkingGroup",
                        "minMultiplicity": 0,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:ParkingGroup;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refParkingSpot",
                        "minMultiplicity": 0,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:ParkingSpot;1"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:OffStreetParking;1",
                "@type": "Interface",
                "displayName": "OffStreetParking",
                "@context": "dtmi:dtdl:context;2",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "accessModified",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "aggregateRating",
                        "schema": "double",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "contactPoint",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:ContactPoint;1"
                    },
                    {
                        "@type": "Property",
                        "name": "highestFloor",
                        "schema": "integer",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "images",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "lowestFloor",
                        "schema": "integer",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "openingHours",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "priceCurrency",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "priceRatePerMinute",
                        "schema": "double",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "provider",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "facilities",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "bikeParking",
                                    "displayName": "BikeParking",
                                    "enumValue": "bikeParking"
                                },
                                {
                                    "name": "cashMachine",
                                    "displayName": "CashMachine",
                                    "enumValue": "cashMachine"
                                },
                                {
                                    "name": "copyMachineOrService",
                                    "displayName": "CopyMachineOrService",
                                    "enumValue": "copyMachineOrService"
                                },
                                {
                                    "name": "defibrillator",
                                    "displayName": "Defibrillator",
                                    "enumValue": "defibrillator"
                                },
                                {
                                    "name": "dumpingStation",
                                    "displayName": "DumpingStation",
                                    "enumValue": "dumpingStation"
                                },
                                {
                                    "name": "electricChargingStation",
                                    "displayName": "ElectricChargingStation",
                                    "enumValue": "electricChargingStation"
                                },
                                {
                                    "name": "elevator",
                                    "displayName": "Elevator",
                                    "enumValue": "elevator"
                                },
                                {
                                    "name": "faxMachineOrService",
                                    "displayName": "FaxMachineOrService",
                                    "enumValue": "faxMachineOrService"
                                },
                                {
                                    "name": "fireHose",
                                    "displayName": "FireHose",
                                    "enumValue": "fireHose"
                                },
                                {
                                    "name": "fireExtinguisher",
                                    "displayName": "FireExtinguisher",
                                    "enumValue": "fireExtinguisher"
                                },
                                {
                                    "name": "fireHydrant",
                                    "displayName": "FireHydrant",
                                    "enumValue": "fireHydrant"
                                },
                                {
                                    "name": "firstAidEquipment",
                                    "displayName": "FirstAidEquipment",
                                    "enumValue": "firstAidEquipment"
                                },
                                {
                                    "name": "freshWater",
                                    "displayName": "FreshWater",
                                    "enumValue": "freshWater"
                                },
                                {
                                    "name": "iceFreeScaffold",
                                    "displayName": "IceFreeScaffold",
                                    "enumValue": "iceFreeScaffold"
                                },
                                {
                                    "name": "informationPoint",
                                    "displayName": "InformationPoint",
                                    "enumValue": "informationPoint"
                                },
                                {
                                    "name": "internetWireless",
                                    "displayName": "InternetWireless",
                                    "enumValue": "internetWireless"
                                },
                                {
                                    "name": "luggageLocker",
                                    "displayName": "LuggageLocker",
                                    "enumValue": "luggageLocker"
                                },
                                {
                                    "name": "payDesk",
                                    "displayName": "PayDesk",
                                    "enumValue": "payDesk"
                                },
                                {
                                    "name": "paymentMachine",
                                    "displayName": "PaymentMachine",
                                    "enumValue": "paymentMachine"
                                },
                                {
                                    "name": "playground",
                                    "displayName": "Playground",
                                    "enumValue": "playground"
                                },
                                {
                                    "name": "publicPhone",
                                    "displayName": "PublicPhone",
                                    "enumValue": "publicPhone"
                                },
                                {
                                    "name": "refuseBin",
                                    "displayName": "RefuseBin",
                                    "enumValue": "refuseBin"
                                },
                                {
                                    "name": "safeDeposit",
                                    "displayName": "SafeDeposit",
                                    "enumValue": "safeDeposit"
                                },
                                {
                                    "name": "shower",
                                    "displayName": "Shower",
                                    "enumValue": "shower"
                                },
                                {
                                    "name": "toilet",
                                    "displayName": "Toilet",
                                    "enumValue": "toilet"
                                },
                                {
                                    "name": "tollTerminal",
                                    "displayName": "TollTerminal",
                                    "enumValue": "tollTerminal"
                                },
                                {
                                    "name": "vendingMachine",
                                    "displayName": "VendingMachine",
                                    "enumValue": "vendingMachine"
                                },
                                {
                                    "name": "wasteDisposal",
                                    "displayName": "WasteDisposal",
                                    "enumValue": "wasteDisposal"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "layout",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "automatedParkingGarage",
                                    "displayName": "AutomatedParkingGarage",
                                    "enumValue": "automatedParkingGarage"
                                },
                                {
                                    "name": "carports",
                                    "displayName": "Carports",
                                    "enumValue": "carports"
                                },
                                {
                                    "name": "covered",
                                    "displayName": "Covered",
                                    "enumValue": "covered"
                                },
                                {
                                    "name": "field",
                                    "displayName": "Field",
                                    "enumValue": "field"
                                },
                                {
                                    "name": "garageBoxes",
                                    "displayName": "GarageBoxes",
                                    "enumValue": "garageBoxes"
                                },
                                {
                                    "name": "multiLevel",
                                    "displayName": "MultiLevel",
                                    "enumValue": "multiLevel"
                                },
                                {
                                    "name": "multiStorey",
                                    "displayName": "MultiStorey",
                                    "enumValue": "multiStorey"
                                },
                                {
                                    "name": "nested",
                                    "displayName": "Nested",
                                    "enumValue": "nested"
                                },
                                {
                                    "name": "openSpace",
                                    "displayName": "OpenSpace",
                                    "enumValue": "openSpace"
                                },
                                {
                                    "name": "rooftop",
                                    "displayName": "Rooftop",
                                    "enumValue": "rooftop"
                                },
                                {
                                    "name": "sheds",
                                    "displayName": "Sheds",
                                    "enumValue": "sheds"
                                },
                                {
                                    "name": "singleLevel",
                                    "displayName": "SingleLevel",
                                    "enumValue": "singleLevel"
                                },
                                {
                                    "name": "surface",
                                    "displayName": "Surface",
                                    "enumValue": "surface"
                                },
                                {
                                    "name": "other",
                                    "displayName": "Other",
                                    "enumValue": "other"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "usageScenario",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "automaticParkingGuidance",
                                    "displayName": "AutomaticParkingGuidance",
                                    "enumValue": "automaticParkingGuidance"
                                },
                                {
                                    "name": "carSharing",
                                    "displayName": "CarSharing",
                                    "enumValue": "carSharing"
                                },
                                {
                                    "name": "dropOffWithValet",
                                    "displayName": "DropOffWithValet",
                                    "enumValue": "dropOffWithValet"
                                },
                                {
                                    "name": "dropOffMechanical",
                                    "displayName": "DropOffMechanical",
                                    "enumValue": "dropOffMechanical"
                                },
                                {
                                    "name": "dropOff",
                                    "displayName": "DropOff",
                                    "enumValue": "dropOff"
                                },
                                {
                                    "name": "eventParking",
                                    "displayName": "EventParking",
                                    "enumValue": "eventParking"
                                },
                                {
                                    "name": "kissAndRide",
                                    "displayName": "KissAndRide",
                                    "enumValue": "kissAndRide"
                                },
                                {
                                    "name": "liftShare",
                                    "displayName": "LiftShare",
                                    "enumValue": "liftShare"
                                },
                                {
                                    "name": "loadingBay",
                                    "displayName": "LoadingBay",
                                    "enumValue": "loadingBay"
                                },
                                {
                                    "name": "overnightParking",
                                    "displayName": "OvernightParking",
                                    "enumValue": "overnightParking"
                                },
                                {
                                    "name": "parkAndCycle",
                                    "displayName": "ParkAndCycle",
                                    "enumValue": "parkAndCycle"
                                },
                                {
                                    "name": "parkAndRide",
                                    "displayName": "ParkAndRide",
                                    "enumValue": "parkAndRide"
                                },
                                {
                                    "name": "parkAndWalk",
                                    "displayName": "ParkAndWalk",
                                    "enumValue": "parkAndWalk"
                                },
                                {
                                    "name": "restArea",
                                    "displayName": "RestArea",
                                    "enumValue": "restArea"
                                },
                                {
                                    "name": "serviceArea",
                                    "displayName": "ServiceArea",
                                    "enumValue": "serviceArea"
                                },
                                {
                                    "name": "staffGuidesToSpace",
                                    "displayName": "StaffGuidesToSpace",
                                    "enumValue": "staffGuidesToSpace"
                                },
                                {
                                    "name": "truckParking",
                                    "displayName": "TruckParking",
                                    "enumValue": "truckParking"
                                },
                                {
                                    "name": "vehicleLift",
                                    "displayName": "VehicleLift",
                                    "enumValue": "vehicleLift"
                                },
                                {
                                    "name": "other",
                                    "displayName": "Other",
                                    "enumValue": "other"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "security",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "areaSeparatedFromSurroundings",
                                    "displayName": "AreaSeparatedFromSurroundings",
                                    "enumValue": "areaSeparatedFromSurroundings"
                                },
                                {
                                    "name": "cctv",
                                    "displayName": "Cctv",
                                    "enumValue": "cctv"
                                },
                                {
                                    "name": "dog",
                                    "displayName": "Dog",
                                    "enumValue": "dog"
                                },
                                {
                                    "name": "externalSecurity",
                                    "displayName": "ExternalSecurity",
                                    "enumValue": "externalSecurity"
                                },
                                {
                                    "name": "fences",
                                    "displayName": "Fences",
                                    "enumValue": "fences"
                                },
                                {
                                    "name": "floodLight",
                                    "displayName": "FloodLight",
                                    "enumValue": "floodLight"
                                },
                                {
                                    "name": "guard24hours",
                                    "displayName": "Guard24hours",
                                    "enumValue": "guard24hours"
                                },
                                {
                                    "name": "lighting",
                                    "displayName": "Lighting",
                                    "enumValue": "lighting"
                                },
                                {
                                    "name": "patrolled",
                                    "displayName": "Patrolled",
                                    "enumValue": "patrolled"
                                },
                                {
                                    "name": "securityStaff",
                                    "displayName": "SecurityStaff",
                                    "enumValue": "securityStaff"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "specialLocation",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "airportTerminal",
                                    "displayName": "AirportTerminal",
                                    "enumValue": "airportTerminal"
                                },
                                {
                                    "name": "cableCarStation",
                                    "displayName": "CableCarStation",
                                    "enumValue": "cableCarStation"
                                },
                                {
                                    "name": "campground",
                                    "displayName": "Campground",
                                    "enumValue": "campground"
                                },
                                {
                                    "name": "cinema",
                                    "displayName": "Cinema",
                                    "enumValue": "cinema"
                                },
                                {
                                    "name": "coachStation",
                                    "displayName": "CoachStation",
                                    "enumValue": "coachStation"
                                },
                                {
                                    "name": "conventionCentre",
                                    "displayName": "ConventionCentre",
                                    "enumValue": "conventionCentre"
                                },
                                {
                                    "name": "exhibitionCentre",
                                    "displayName": "ExhibitionCentre",
                                    "enumValue": "exhibitionCentre"
                                },
                                {
                                    "name": "ferryTerminal",
                                    "displayName": "FerryTerminal",
                                    "enumValue": "ferryTerminal"
                                },
                                {
                                    "name": "hotel",
                                    "displayName": "Hotel",
                                    "enumValue": "hotel"
                                },
                                {
                                    "name": "market",
                                    "displayName": "Market",
                                    "enumValue": "market"
                                },
                                {
                                    "name": "publicTransportStation",
                                    "displayName": "PublicTransportStation",
                                    "enumValue": "publicTransportStation"
                                },
                                {
                                    "name": "religiousCentre",
                                    "displayName": "ReligiousCentre",
                                    "enumValue": "religiousCentre"
                                },
                                {
                                    "name": "shoppingCentre",
                                    "displayName": "ShoppingCentre",
                                    "enumValue": "shoppingCentre"
                                },
                                {
                                    "name": "skilift",
                                    "displayName": "Skilift",
                                    "enumValue": "skilift"
                                },
                                {
                                    "name": "specificFacility",
                                    "displayName": "SpecificFacility",
                                    "enumValue": "specificFacility"
                                },
                                {
                                    "name": "themePark",
                                    "displayName": "ThemePark",
                                    "enumValue": "themePark"
                                },
                                {
                                    "name": "trainStation",
                                    "displayName": "TrainStation",
                                    "enumValue": "trainStation"
                                },
                                {
                                    "name": "vehicleOnRailTerminal",
                                    "displayName": "VehicleOnRailTerminal",
                                    "enumValue": "vehicleOnRailTerminal"
                                },
                                {
                                    "name": "other",
                                    "displayName": "Other",
                                    "enumValue": "other"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "category",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "extCategory",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "firstAvailableFloor",
                        "schema": "integer"
                    },
                    {
                        "@type": "Property",
                        "name": "measuresPeriod",
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "measuresPeriodUnit",
                        "schema": "string"
                    },
                    {
                        "@type": "Property",
                        "name": "occupancy",
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "occupancyModified",
                        "schema": "double"
                    },
                    {
                        "@type": "Property",
                        "name": "occupiedSpotNumber",
                        "schema": "integer"
                    },
                    {
                        "@type": "Property",
                        "name": "vehicleEntranceCount",
                        "schema": "integer"
                    },
                    {
                        "@type": "Property",
                        "name": "vehicleExitCount",
                        "schema": "integer"
                    },
                    {
                        "@type": "Property",
                        "name": "status",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "full",
                                    "displayName": "Full",
                                    "enumValue": "full"
                                },
                                {
                                    "name": "almostFull",
                                    "displayName": "AlmostFull",
                                    "enumValue": "almostFull"
                                },
                                {
                                    "name": "fullAtEntrance",
                                    "displayName": "FullAtEntrance",
                                    "enumValue": "fullAtEntrance"
                                },
                                {
                                    "name": "spacesAvailable",
                                    "displayName": "SpacesAvailable",
                                    "enumValue": "spacesAvailable"
                                },
                                {
                                    "name": "open",
                                    "displayName": "Open",
                                    "enumValue": "open"
                                },
                                {
                                    "name": "openingTimesInForce",
                                    "displayName": "OpeningTimesInForce",
                                    "enumValue": "openingTimesInForce"
                                },
                                {
                                    "name": "closed",
                                    "displayName": "Closed",
                                    "enumValue": "closed"
                                },
                                {
                                    "name": "closedAbnormal",
                                    "displayName": "ClosedAbnormal",
                                    "enumValue": "closedAbnormal"
                                }
                            ]
                        }
                    },
                    {
                        "@type": "Component",
                        "name": "averageSpotLength",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:averageSpotLength;1"
                    },
                    {
                        "@type": "Component",
                        "name": "averageSpotWidth",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:averageSpotWidth;1"
                    },
                    {
                        "@type": "Component",
                        "name": "maximumAllowedHeight",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:maximumAllowedHeight;1"
                    },
                    {
                        "@type": "Component",
                        "name": "maximumAllowedWidth",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:maximumAllowedWidth;1"
                    },
                    {
                        "@type": "Component",
                        "name": "maximumParkingDuration",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:maximumParkingDuration;1"
                    },
                    {
                        "@type": "Component",
                        "name": "occupancyDetectionType",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:occupancyDetectionType;1"
                    },
                    {
                        "@type": "Component",
                        "name": "parkingMode",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:parkingMode;1"
                    },
                    {
                        "@type": "Component",
                        "name": "reservationType",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:reservationType;1"
                    },
                    {
                        "@type": "Component",
                        "name": "acceptedPaymentMethod",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:acceptedPaymentMethod;1"
                    },
                    {
                        "@type": "Component",
                        "name": "allowedVehicleType",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:allowedVehicleType;1"
                    },
                    {
                        "@type": "Component",
                        "name": "areaServed",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:areaServed;1"
                    },
                    {
                        "@type": "Component",
                        "name": "chargeType",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:chargeType;1"
                    },
                    {
                        "@type": "Component",
                        "name": "extraSpotNumber",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:extraSpotNumber;1"
                    },
                    {
                        "@type": "Component",
                        "name": "requiredPermit",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:requiredPermit;1"
                    },
                    {
                        "@type": "Component",
                        "name": "totalSpotNumber",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:totalSpotNumber;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refParkingGroup",
                        "minMultiplicity": 0,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:ParkingGroup;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refParkingSpot",
                        "minMultiplicity": 0,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:ParkingSpot;1"
                    }
                ]
            },
            {
                "@context": "dtmi:dtdl:context;2",
                "@id": "dtmi:digitaltwins:ngsi_ld:city:TrafficFlowObserved;1",
                "@type": "Interface",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "displayName": "TrafficFlowObserved",
                "description": "An observation of traffic flow conditions at a certain place and time.",
                "comment": "Adapted from https://github.com/smart-data-models/dataModel.Transportation",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "schema": "string",
                        "description": "The geographic area where a service or offered item is provided",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Distance"],
                        "name": "averageGapDistance",
                        "description": "Average gap distance between consecutive vehicles.",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "TimeSpan"],
                        "name": "averageHeadwayTime",
                        "description": "Average headway time. Headway time is the time ellapsed between two consecutive vehicles.",
                        "schema": "double",
                        "unit": "second",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Distance"],
                        "name": "averageVehicleLength",
                        "description": "Average length of the vehicles transiting during the observation period.",
                        "schema": "double",
                        "unit": "metre",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Velocity"],
                        "name": "averageVehicleSpeed",
                        "description": " Average speed of the vehicles transiting during the observation period.",
                        "schema": "double",
                        "unit": "kilometrePerHour",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "congested",
                        "description": "Flags whether there was a traffic congestion during the observation period in the referred lane.",
                        "schema": "boolean",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateObservedFrom",
                        "schema": "dateTime",
                        "description": "Observation period start date and time.",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateObservedTo",
                        "schema": "dateTime",
                        "description": "Observation period end date and time.",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "intensity",
                        "description": "Total number of vehicles detected during this observation period",
                        "schema": "integer",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "laneDirection",
                        "description": "Usual direction of travel in the lane referred by this observation. This attribute is useful when the observation is not referencing any road segment, allowing to know the direction of travel of the traffic flow observed.",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "forward",
                                    "enumValue": "forward"
                                },
                                {
                                    "name": "backward",
                                    "enumValue": "backward"
                                }
                            ]
                        }
                    },
                    {
                        "@type": "Relationship",
                        "name": "laneId",
                        "description": "Lane identifier. Lane identification is done using the conventions defined by RoadSegment entity which are based on [OpenStreetMap](http://wiki.openstreetmap.org/wiki/Forward_%26_backward,_left_%26_right).",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:RoadSegment;1"
                    },
                    {
                        "@type": "Property",
                        "name": "occupancy",
                        "description": "Fraction of the observation time where a vehicle has been occupying the observed lane",
                        "schema": "double",
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refRoadSegment",
                        "description": "Concerned road segment on which the observation has been made. Reference to an entity of type RoadSegment",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:RoadSegment;1"
                    },
                    {
                        "@type": "Property",
                        "name": "reversedLane",
                        "description": "Flags whether traffic in the lane was reversed during the observation period.",
                        "schema": "boolean",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "vehicleSubType",
                        "description": "It allows to specify a sub type of vehicleType, eg if the vehicleType is set to Lorry the vehicleSubType may be OGV1 or OGV2 to convey more information about the exact type of vehicle.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "vehicleType",
                        "description": "Type of vehicle from the point of view of its structural characteristics.",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "argriculturalVehicle",
                                    "enumValue": "argriculturalVehicle"
                                },
                                {
                                    "name": "bicycle",
                                    "enumValue": "bicycle"
                                },
                                {
                                    "name": "bus",
                                    "enumValue": "bus"
                                },
                                {
                                    "name": "minibus",
                                    "enumValue": "minibus"
                                },
                                {
                                    "name": "car",
                                    "enumValue": "car"
                                },
                                {
                                    "name": "caravan",
                                    "enumValue": "caravan"
                                },
                                {
                                    "name": "tram",
                                    "enumValue": "tram"
                                },
                                {
                                    "name": "tanker",
                                    "enumValue": "tanker"
                                },
                                {
                                    "name": "carWithCaravan",
                                    "enumValue": "carWithCaravan"
                                },
                                {
                                    "name": "carWithTrailer",
                                    "enumValue": "carWithTrailer"
                                },
                                {
                                    "name": "lorry",
                                    "enumValue": "lorry"
                                },
                                {
                                    "name": "moped",
                                    "enumValue": "moped"
                                },
                                {
                                    "name": "motorcycle",
                                    "enumValue": "motorcycle"
                                },
                                {
                                    "name": "motorcycleWithSidecar",
                                    "enumValue": "motorcycleWithSidecar"
                                },
                                {
                                    "name": "motorscooter",
                                    "enumValue": "motorscooter"
                                },
                                {
                                    "name": "trailer",
                                    "enumValue": "trailer"
                                },
                                {
                                    "name": "van",
                                    "enumValue": "van"
                                },
                                {
                                    "name": "constructionOrMaintenanceVehicle",
                                    "enumValue": "constructionOrMaintenanceVehicle"
                                },
                                {
                                    "name": "trolley",
                                    "enumValue": "trolley"
                                },
                                {
                                    "name": "binTrolley",
                                    "enumValue": "binTrolley"
                                },
                                {
                                    "name": "sweepingMachine",
                                    "enumValue": "sweepingMachine"
                                },
                                {
                                    "name": "cleaningTrolley",
                                    "enumValue": "cleaningTolley"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Road;1",
                "@type": "Interface",
                "displayName": "Road",
                "contents": [],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:RoadSegment;1",
                "@type": "Interface",
                "displayName": "RoadSegment",
                "contents": [
                    {
                        "@type": "Relationship",
                        "name": "refRoad",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:Road;1"
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:EVChargingStation;1",
                "@type": "Interface",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "displayName": "EV Charging Station",
                "description": "EV Charging Station",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "capacity",
                        "schema": "integer",
                        "writable": true,
                        "description": "The total number of vehicles which can be charged at the same time. The total number of sockets can be higher."
                    },
                    {
                        "@type": "Property",
                        "name": "socketNumber",
                        "schema": "integer",
                        "writable": true,
                        "description": "The total number of sockets offered by this charging station."
                    },
                    {
                        "@type": "Property",
                        "name": "availableCapacity",
                        "schema": "integer",
                        "writable": true,
                        "description": "The number of vehicles which currently can be charged."
                    },
                    {
                        "@type": "Property",
                        "name": "allowedVehicleType",
                        "description": "Vehicle type(s) which can be charged. Model:'http://schema.org/Text'. Enum:'bicycle, bus, car, caravan, motorcycle, motorscooter, truck' ",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "bicycle",
                                    "displayName": "bicycle",
                                    "enumValue": "bicycle"
                                },
                                {
                                    "name": "bus",
                                    "displayName": "bus",
                                    "enumValue": "bus"
                                },
                                {
                                    "name": "car",
                                    "displayName": "car",
                                    "enumValue": "car"
                                },
                                {
                                    "name": "caravan",
                                    "displayName": "caravan",
                                    "enumValue": "caravan"
                                },
                                {
                                    "name": "motorcycle",
                                    "displayName": "motorcycle",
                                    "enumValue": "motorcycle"
                                },
                                {
                                    "name": "motorscooter",
                                    "displayName": "motorscooter",
                                    "enumValue": "motorscooter"
                                },
                                {
                                    "name": "truck",
                                    "displayName": "truck",
                                    "enumValue": "truck"
                                }
                            ]
                        }
                    },
                    {
                        "@type": "Property",
                        "name": "socketType",
                        "description": "The type of sockets offered by this station. Model:'http://schema.org/Text'. Enum:'Caravan_Mains_Socket, CHAdeMO, CCS/SAE, Dual_CHAdeMO, Dual_J-1772, Dual_Mennekes, J-1772, Mennekes, Other, Tesla, Type2, Type3, Wall_Euro'",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "caravan_Mains_Socket",
                                    "displayName": "Caravan_Mains_Socket",
                                    "enumValue": "Caravan_Mains_Socket"
                                },
                                {
                                    "name": "CHAdeMO",
                                    "displayName": "CHAdeMO",
                                    "enumValue": "CHAdeMO"
                                },
                                {
                                    "name": "CCSSAE",
                                    "displayName": "CCSSAE",
                                    "enumValue": "CCSSAE"
                                },
                                {
                                    "name": "DualCHAdeMO",
                                    "displayName": "Dual_CHAdeMO",
                                    "enumValue": "DualCHAdeMO"
                                },
                                {
                                    "name": "DualJ1772",
                                    "displayName": "Dual_J-1772",
                                    "enumValue": "DualJ1772"
                                },
                                {
                                    "name": "DualMennekes",
                                    "displayName": "Dual_Mennekes",
                                    "enumValue": "DualMennekes"
                                },
                                {
                                    "name": "J1772",
                                    "displayName": "J-1772",
                                    "enumValue": "J1772"
                                },
                                {
                                    "name": "Mennekes",
                                    "displayName": "Mennekes",
                                    "enumValue": "Mennekes"
                                },
                                {
                                    "name": "other",
                                    "displayName": "Other",
                                    "enumValue": "Other"
                                },
                                {
                                    "name": "Tesla",
                                    "displayName": "Tesla",
                                    "enumValue": "Tesla"
                                },
                                {
                                    "name": "type2",
                                    "displayName": "Type2",
                                    "enumValue": "Type2"
                                },
                                {
                                    "name": "type3",
                                    "displayName": "Type3",
                                    "enumValue": "Type3"
                                },
                                {
                                    "name": "WallEuro",
                                    "displayName": "Wall_Euro",
                                    "enumValue": "WallEuro"
                                }
                            ]
                        }
                    },
                    {
                        "@type": "Property",
                        "name": "openingHours",
                        "schema": "string",
                        "writable": true,
                        "description": "The opening hours of the charging station."
                    },
                    {
                        "@type": "Property",
                        "name": "status",
                        "description": "Model:'http://schema.org/Text'. Status of the charging station. Enum:'almostEmpty, almostFull, empty, full, outOfService, withIncidence, working'. Or any other application-specific.",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "almostEmpty",
                                    "displayName": "almostEmpty",
                                    "enumValue": "almostEmpty"
                                },
                                {
                                    "name": "almostFull",
                                    "displayName": "almostFull",
                                    "enumValue": "almostFull"
                                },
                                {
                                    "name": "empty",
                                    "displayName": "empty",
                                    "enumValue": "empty"
                                },
                                {
                                    "name": "full",
                                    "displayName": "full",
                                    "enumValue": "full"
                                },
                                {
                                    "name": "outOfService",
                                    "displayName": "outOfService",
                                    "enumValue": "outOfService"
                                },
                                {
                                    "name": "withIncidence",
                                    "displayName": "withIncidence",
                                    "enumValue": "withIncidence"
                                },
                                {
                                    "name": "working",
                                    "displayName": "working",
                                    "enumValue": "working"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "network",
                        "description": "The name of the Network, with that the operator cooperates. Model:'https://schema.org/Text'.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "operator",
                        "description": "Charging station's operator. Model:'https://schema.org/Text'.",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "contactPoint",
                        "description": "Charging station contact point. Model:'https://schema.org/contactPoint'.",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:ContactPoint;1"
                    },
                    {
                        "@type": ["Property", "Current"],
                        "name": "amperage",
                        "description": "The total amperage offered by the charging station. Units:'Ampers (A)'",
                        "schema": "double",
                        "unit": "ampere",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "Voltage"],
                        "name": "voltage",
                        "description": "The total voltage offered by the charging station. Units:'Volts (V)'",
                        "schema": "double",
                        "unit": "volt",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "chargeType",
                        "description": "Vehicle type(s) which can be charged. Model:'http://schema.org/Text'. Enum:'bicycle, bus, car, caravan, motorcycle, motorscooter, truck' ",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "annualPayment",
                                    "displayName": "annualPayment",
                                    "enumValue": "annualPayment"
                                },
                                {
                                    "name": "flat",
                                    "displayName": "flat",
                                    "enumValue": "flat"
                                },
                                {
                                    "name": "free",
                                    "displayName": "free",
                                    "enumValue": "free"
                                },
                                {
                                    "name": "monthlyPayment",
                                    "displayName": "monthlyPayment",
                                    "enumValue": "monthlyPayment"
                                },
                                {
                                    "name": "other",
                                    "displayName": "other",
                                    "enumValue": "other"
                                }
                            ]
                        }
                    },
                    {
                        "@type": "Property",
                        "name": "acceptedPaymentMethod",
                        "description": "Type(s) of charge when using this station. Model:'https://schema.org/Text'. Enum:'ByBankTransferInAdvance, ByInvoice, Cash, CheckInAdvance, COD, DirectDebit, GoogleCheckout, PayPal, PaySwarm'",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "byBankTransferInAdvance",
                                    "displayName": "ByBankTransferInAdvance",
                                    "enumValue": "ByBankTransferInAdvance"
                                },
                                {
                                    "name": "byInvoice",
                                    "displayName": "ByInvoice",
                                    "enumValue": "ByInvoice"
                                },
                                {
                                    "name": "cash",
                                    "displayName": "Cash",
                                    "enumValue": "Cash"
                                },
                                {
                                    "name": "checkInAdvance",
                                    "displayName": "CheckInAdvance",
                                    "enumValue": "CheckInAdvance"
                                },
                                {
                                    "name": "COD",
                                    "displayName": "COD",
                                    "enumValue": "COD"
                                },
                                {
                                    "name": "directDebit",
                                    "displayName": "DirectDebit",
                                    "enumValue": "DirectDebit"
                                },
                                {
                                    "name": "GoogleCheckout",
                                    "displayName": "GoogleCheckout",
                                    "enumValue": "GoogleCheckout"
                                },
                                {
                                    "name": "PayPal",
                                    "displayName": "PayPal",
                                    "enumValue": "PayPal"
                                },
                                {
                                    "name": "PaySwarm",
                                    "displayName": "PaySwarm",
                                    "enumValue": "PaySwarm"
                                }
                            ]
                        }
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:CrowdFlowObserved;1",
                "@type": "Interface",
                "displayName": "CrowdFlowObserved",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:EnvironmentBaseModel;1",
                "contents": [
                    {
                        "@type": "Relationship",
                        "name": "refRoadSegment",
                        "description": "Concerned road segment on which the observation has been made. Model:'https://schema.org/URL",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:RoadSegment;1"
                    },
                    {
                        "@type": "Property",
                        "name": "dateObservedFrom",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateObservedTo",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "occupancy",
                        "description": "Property. Fraction of the observation time where a person has been occupying the observed walkway.",
                        "schema": "boolean",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "averageCrowdSpeed",
                        "description": "Average speed of the crowd transiting during the observation period. Units:'Kilometer per hour (Km/h).'",
                        "schema": "integer",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "congested",
                        "description": "Flags whether there was a crowd congestion during the observation period in the referred walkway. The absence of this attribute means no crowd congestion.",
                        "schema": "boolean",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "averageHeadwayTime",
                        "description": "Average headway time. Headway time is the time\n    elapsed between two consecutive persons.Units:'second (s)'",
                        "schema": "double",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "direction",
                        "description": "Usual direction of travel in the walkway referred by this observation with respect to the city center. Enum:'inbound, outbound'",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "inbound",
                                    "displayName": "Inbound",
                                    "enumValue": "inbound"
                                },
                                {
                                    "name": "outbound",
                                    "displayName": "Outbound",
                                    "enumValue": "outbound"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "peopleCount",
                        "schema": "integer"
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:EnvironmentBaseModel;1",
                "@type": "Interface",
                "displayName": "EnvironmentBaseModel",
                "@context": "dtmi:dtdl:context;2",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "dateObserved",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refPointOfInterest",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:PointOfInterest;1"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:WeatherObserved;1",
                "@type": "Interface",
                "@context": "dtmi:dtdl:context;2",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:EnvironmentBaseModel;1",
                "displayName": "WeatherObserved",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "weatherType",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "stationCode",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "stationName",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "pressureTendency",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "raising",
                                    "displayName": "Raising",
                                    "enumValue": "raising"
                                },
                                {
                                    "name": "steady",
                                    "displayName": "Steady",
                                    "enumValue": "steady"
                                },
                                {
                                    "name": "falling",
                                    "displayName": "Falling",
                                    "enumValue": "falling"
                                }
                            ]
                        }
                    },
                    {
                        "@type": ["Property", "Pressure"],
                        "name": "atmosphericPressure",
                        "schema": "double",
                        "unit": "pascal"
                    },
                    {
                        "@type": ["Property", "Temperature"],
                        "name": "dewpoint",
                        "schema": "double",
                        "unit": "degreeCelsius"
                    },
                    {
                        "@type": ["Property", "Temperature"],
                        "name": "FeelsLikeTemperature",
                        "schema": "double",
                        "unit": "degreeCelsius"
                    },
                    {
                        "@type": ["Property", "Temperature"],
                        "name": "temperature",
                        "schema": "double",
                        "unit": "degreeCelsius"
                    },
                    {
                        "@type": ["Property", "Illuminance"],
                        "name": "illuminance",
                        "schema": "double",
                        "unit": "lux"
                    },
                    {
                        "@type": ["Property", "VolumeFlowRate"],
                        "name": "precipitation",
                        "schema": "double",
                        "unit": "litrePerSecond"
                    },
                    {
                        "@type": ["Property"],
                        "name": "relativeHumidity",
                        "schema": "double"
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "snowHeight",
                        "schema": "double",
                        "unit": "centimetre"
                    },
                    {
                        "@type": ["Property", "Power"],
                        "name": "solarRadiation",
                        "schema": "double",
                        "unit": "watt"
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "streamGauge",
                        "schema": "double",
                        "unit": "centimetre"
                    },
                    {
                        "@type": ["Property"],
                        "name": "uVIndexMax",
                        "schema": "double"
                    },
                    {
                        "@type": ["Property", "Length"],
                        "name": "visibility",
                        "schema": "double",
                        "unit": "metre"
                    },
                    {
                        "@type": ["Property", "Angle"],
                        "name": "WindDirection",
                        "schema": "double",
                        "unit": "degreeOfArc"
                    },
                    {
                        "@type": ["Property", "Velocity"],
                        "name": "WindSpeed",
                        "schema": "double",
                        "unit": "knot"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refDevice",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:device;1"
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:WaterQualityObserved;1",
                "@type": "Interface",
                "@context": "dtmi:dtdl:context;2",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:EnvironmentBaseModel;1",
                "displayName": "WaterQualityObserved",
                "contents": [
                    {
                        "@type": ["Property", "Density"],
                        "name": "Chla",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "Cl",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "NH3",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "NH4",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "NO3",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "O2",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "PC",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "PE",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Current"],
                        "name": "conductance",
                        "schema": "double",
                        "unit": "ampere"
                    },
                    {
                        "@type": ["Property", "Current"],
                        "name": "conductivity",
                        "schema": "double",
                        "unit": "ampere"
                    },
                    {
                        "@type": ["Property", "Voltage"],
                        "name": "orp",
                        "schema": "double",
                        "unit": "millivolt"
                    },
                    {
                        "@type": ["Property"],
                        "name": "pH",
                        "schema": "double"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "salinity",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "tds",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "tss",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Temperature"],
                        "name": "temperature",
                        "schema": "double",
                        "unit": "degreeCelsius"
                    },
                    {
                        "@type": ["Property", "Distance"],
                        "name": "turbidity",
                        "schema": "double",
                        "unit": "nanometre"
                    },
                    {
                        "@type": "Telemetry",
                        "name": "measurand",
                        "schema": {
                            "@type": "Array",
                            "elementSchema": "string"
                        }
                    }
                ]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:NoiseLevelObserved;1",
                "@type": "Interface",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:EnvironmentBaseModel;1",
                "displayName": "NoiseLevelObserved",
                "description": "The Noise level observed at a certain spot",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "dateObservedFrom",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateObservedTo",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "sonometerClass",
                        "schema": "integer",
                        "writable": true
                    },
                    {
                        "@type": ["Property", "SoundPressure"],
                        "name": "LAS",
                        "schema": "double",
                        "unit": "decibel"
                    },
                    {
                        "@type": ["Property", "SoundPressure"],
                        "name": "LAeq",
                        "schema": "double",
                        "unit": "decibel"
                    },
                    {
                        "@type": ["Property", "SoundPressure"],
                        "name": "LAeq_d",
                        "schema": "double",
                        "unit": "decibel"
                    },
                    {
                        "@type": ["Property", "SoundPressure"],
                        "name": "LAmax",
                        "schema": "double",
                        "unit": "decibel"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refDevice",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:device;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refWeatherObserverd",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:WeatherObserved;1"
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1",
                "@type": "Interface",
                "displayName": "AirQualityLevel",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "level",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "good",
                                    "displayName": "Good",
                                    "enumValue": "good"
                                },
                                {
                                    "name": "moderate",
                                    "displayName": "Moderate",
                                    "enumValue": "moderate"
                                },
                                {
                                    "name": "unhealthyForSensitiveGroups",
                                    "displayName": "UnhealthyForSensitiveGroups",
                                    "enumValue": "unhealthyForSensitiveGroups"
                                },
                                {
                                    "name": "unhealthy",
                                    "displayName": "Unhealthy",
                                    "enumValue": "unhealthy"
                                },
                                {
                                    "name": "veryUnhealthy",
                                    "displayName": "VeryUnhealthy",
                                    "enumValue": "veryUnhealthy"
                                },
                                {
                                    "name": "hazardous",
                                    "displayName": "Hazardous",
                                    "enumValue": "hazardous"
                                }
                            ]
                        }
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:AirQualityObserved;1",
                "@type": "Interface",
                "displayName": "AirQualityObserved",
                "extends": "dtmi:digitaltwins:ngsi_ld:city:EnvironmentBaseModel;1",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "airQualityIndex",
                        "schema": "double",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "reliability",
                        "schema": "double",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "volatileOrganicCompoundsTotal",
                        "schema": "integer",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "typeOfLocation",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "inside",
                                    "displayName": "Inside",
                                    "enumValue": "inside"
                                },
                                {
                                    "name": "outside",
                                    "displayName": "Outside",
                                    "enumValue": "outside"
                                }
                            ]
                        }
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "CO2",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "CO",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "PM1",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "PM10",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "PM25",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "NO",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "SO2",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "C6H6",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "NI",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "AS",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "CD",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "NO2",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "O3",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "PB",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "Density"],
                        "name": "SH2",
                        "schema": "double",
                        "unit": "gramPerCubicMetre"
                    },
                    {
                        "@type": ["Property", "VolumeFlowRate"],
                        "name": "precipitation",
                        "schema": "double",
                        "unit": "litrePerSecond"
                    },
                    {
                        "@type": ["Property"],
                        "name": "relativeHumidity",
                        "schema": "double"
                    },
                    {
                        "@type": ["Property", "Temperature"],
                        "name": "temperature",
                        "schema": "double",
                        "unit": "degreeCelsius"
                    },
                    {
                        "@type": ["Property", "Angle"],
                        "name": "WindDirection",
                        "schema": "double",
                        "unit": "degreeOfArc"
                    },
                    {
                        "@type": ["Property", "Velocity"],
                        "name": "WindSpeed",
                        "schema": "double",
                        "unit": "knot"
                    },
                    {
                        "@type": "Component",
                        "name": "airQualityLevel",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "CO2_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "CO_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "PM10_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "PM25_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "NO_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "SO2_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "C6H6level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "NI_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "AS_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "CD_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "NO2_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "O3_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "PB_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Component",
                        "name": "SH2_level",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:AirQualityLevel;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refDevice",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:Device;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refWeatherObserved",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:WeatherObserved;1"
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Address;1",
                "@type": "Interface",
                "displayName": "Address",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "addressCountry",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "addressLocality",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "addressRegion",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "postOfficeBoxNumber",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "postalCode",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "streetAddress",
                        "schema": "string",
                        "writable": true
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:NGSILDBaseModel;1",
                "@type": "Interface",
                "displayName": "NGSILDBaseModel",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "dataProvider",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateModified",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateCreated",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "source",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "alternateName",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "name",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "description",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "owner",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "seeAlso",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "address",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:Address;1"
                    },
                    {
                        "@type": "Component",
                        "name": "location",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:geoLocation;1"
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:ContactPoint;1",
                "@type": "Interface",
                "displayName": "Contact point",
                "description": "A contact point—for example, a Customer Complaints department.",
                "comment": "Model 'ContactPoint' from Schema.org. See https://schema.org/ContactPoint. For use as component in other interfaces",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "additionalType",
                        "displayName": "Additional type",
                        "description": "An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.",
                        "comment": "Schema.org Type: URL",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "alternateName",
                        "displayName": "Alternate name",
                        "description": "An alias for the item.",
                        "comment": "Schema.org Type: Text",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "areaServed",
                        "displayName": "Area served",
                        "description": "The geographic area where a service or offered item is provided. Supersedes serviceArea.",
                        "comment": "Schema.org Type: AdministrativeArea or GeoShape or Place or Text",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "availableLanguage",
                        "displayName": "Available language",
                        "description": "A language someone may use with or at the item, service or place. Please use one of the language codes from the IETF BCP 47 standard. See also inLanguage",
                        "comment": "Schema.org Type: Language or Text",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "contactOption",
                        "displayName": "Contact Option",
                        "description": "An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).",
                        "comment": "Schema.org Type: ContactPointOption (Enumeration)",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "hearingImpairedSupported",
                                    "displayName": "Hearing Impaired Supported",
                                    "enumValue": "HearingImpairedSupported"
                                },
                                {
                                    "name": "tollFree",
                                    "displayName": "Toll free",
                                    "enumValue": "TollFree"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "contactType",
                        "displayName": "Contact type",
                        "description": "A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.",
                        "comment": "Schema.org Type: Text",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "description",
                        "displayName": "Description",
                        "description": "A description of the item.",
                        "comment": "Schema.org Type: Text",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "email",
                        "displayName": "Email",
                        "description": "Email address.",
                        "comment": "Schema.org Type: Text",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "faxNumber",
                        "displayName": "Fax number",
                        "description": "The fax number.",
                        "comment": "Schema.org Type: Text",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "hoursAvailable",
                        "displayName": "Hours available",
                        "description": "The hours during which this service or contact is available.",
                        "comment": "Schema.org Type: OpeningHoursSpecification. See dtmi:digitaltwins:schema_org:schemas:OpeningHoursSpecification;1",
                        "schema": {
                            "@type": "Object",
                            "fields": [
                                {
                                    "name": "closes",
                                    "displayName": "Closes",
                                    "description": "The closing hour of the place or service on the given day(s) of the week.",
                                    "comment": "Schema.org Type: Time",
                                    "schema": "time"
                                },
                                {
                                    "name": "dayOfWeek",
                                    "displayName": "Day of week",
                                    "description": "The day of the week for which these opening hours are valid.",
                                    "comment": "Schema.org Type: DayOfWeek (Enumeration)",
                                    "schema": {
                                        "@type": "Enum",
                                        "valueSchema": "string",
                                        "enumValues": [
                                            {
                                                "name": "monday",
                                                "displayName": "Monday",
                                                "enumValue": "Monday"
                                            },
                                            {
                                                "name": "tuesday",
                                                "displayName": "Tuesday",
                                                "enumValue": "Tuesday"
                                            },
                                            {
                                                "name": "wednesday",
                                                "displayName": "Wednesday",
                                                "enumValue": "Wednesday"
                                            },
                                            {
                                                "name": "thursday",
                                                "displayName": "Thursday",
                                                "enumValue": "Thursday"
                                            },
                                            {
                                                "name": "friday",
                                                "displayName": "Friday",
                                                "enumValue": "Friday"
                                            },
                                            {
                                                "name": "saturday",
                                                "displayName": "Saturday",
                                                "enumValue": "Saturday"
                                            },
                                            {
                                                "name": "sunday",
                                                "displayName": "Sunday",
                                                "enumValue": "Sunday"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "opens",
                                    "displayName": "Opens",
                                    "description": "The opening hour of the place or service on the given day(s) of the week.",
                                    "comment": "Schema.org Type: Time",
                                    "schema": "time"
                                },
                                {
                                    "name": "validFrom",
                                    "displayName": "Valid from",
                                    "description": "The date when the item becomes valid.",
                                    "comment": "Schema.org Type: Date or DateTime",
                                    "schema": "dateTime"
                                },
                                {
                                    "name": "validThrough",
                                    "displayName": "Valid through",
                                    "description": "The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.",
                                    "comment": "Schema.org Type: Date or DateTime",
                                    "schema": "dateTime"
                                }
                            ]
                        },
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "name",
                        "displayName": "Name",
                        "description": "The name of the item.",
                        "comment": "Schema.org Type: Text",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "productSupported",
                        "displayName": "Product supported",
                        "description": "The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. \"iPhone\") or a general category of products or services (e.g. \"smartphones\").",
                        "comment": "Schema.org Type: Product or Text",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "telephone",
                        "displayName": "Telephone",
                        "description": "The telephone number.",
                        "comment": "Schema.org Type: Text",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "url",
                        "displayName": "Url",
                        "description": "URL of the item.",
                        "comment": "Schema.org Type: URL",
                        "schema": "string",
                        "writable": true
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:Device;1",
                "@type": "Interface",
                "displayName": "Device",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "dataProvider",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateModified",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateCreated",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateObserved",
                        "schema": "dateTime",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "source",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "category",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:deviceCategory;1",
                        "displayName": "Category"
                    },
                    {
                        "@type": "Property",
                        "name": "batteryLevel",
                        "schema": "string",
                        "description": "level of the battery",
                        "writable": true
                    },
                    {
                        "@type": "Relationship",
                        "name": "refDeviceModel",
                        "minMultiplicity": 0,
                        "maxMultiplicity": 1,
                        "target": "dtmi:digitaltwins:ngsi_ld:city:DeviceModel;1"
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:deviceCategory;1",
                "@type": "Interface",
                "displayName": "DeviceCategory",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "category",
                        "schema": {
                            "@type": "Enum",
                            "valueSchema": "string",
                            "enumValues": [
                                {
                                    "name": "sensor",
                                    "displayName": "Sensor",
                                    "description": "A device that detects and responds to events or changes in the physical environment such as light, motion, or temperature changes. https://w3id.org/saref#Sensor",
                                    "enumValue": "sensor"
                                },
                                {
                                    "name": "actuator",
                                    "displayName": "Actuator",
                                    "description": "A device responsible for moving or controlling a mechanism or system. https://w3id.org/saref#Actuator",
                                    "enumValue": "actuator"
                                },
                                {
                                    "name": "meter",
                                    "displayName": "Meter",
                                    "description": " A device built to accurately detect and display a quantity in a form readable by a human being. Partially defined by SAREF",
                                    "enumValue": "meter"
                                },
                                {
                                    "name": "hvac",
                                    "displayName": "HVAC",
                                    "description": "Heating, Ventilation and Air Conditioning (HVAC) device that provides indoor environmental comfort. https://w3id.org/saref#HVAC",
                                    "enumValue": "hvac"
                                },
                                {
                                    "name": "network",
                                    "displayName": "Network",
                                    "description": "A device used to connect other devices in a network, such as hub, switch or router in a LAN or Sensor network. (https://w3id.org/saref#Network",
                                    "enumValue": "network"
                                },
                                {
                                    "name": "multimedia",
                                    "displayName": "Multimedia",
                                    "description": "A device designed to display, store, record or play multimedia content such as audio, images, animation, video. https://w3id.org/saref#Multimedia",
                                    "enumValue": "multimedia"
                                },
                                {
                                    "name": "implement",
                                    "displayName": "Implement",
                                    "description": "implement: A device used or needed in a given activity; tool, instrument, utensil, etc. https://github.com/ADAPT/ADAPT/blob/develop/source/ADAPT/Equipment/ImplementConfiguration.cs",
                                    "enumValue": "implement"
                                },
                                {
                                    "name": "irrSystem",
                                    "displayName": "IrrSystem",
                                    "description": "A mobile or fixed irrigation system such as a center pivot, linear, traveling gun, solid set, etc. https://github.com/ADAPT/ADAPT/blob/develop/source/ADAPT/Equipment/IrrSystemConfiguration.cs",
                                    "enumValue": "irrSystem"
                                },
                                {
                                    "name": "irrSection",
                                    "displayName": "IrrSection",
                                    "description": "A section of an IrrSystem. Different enough from a regular section. https://github.com/ADAPT/ADAPT/blob/develop/source/ADAPT/Equipment/IrrSectionConfiguration.cs",
                                    "enumValue": "irrSection"
                                },
                                {
                                    "name": "endgun",
                                    "displayName": "Endgun",
                                    "description": " A device attached to an irrigation system that projects water beyond it https://github.com/ADAPT/ADAPT/blob/develop/source/ADAPT/Equipment/EndgunConfiguration.cs",
                                    "enumValue": "endgun"
                                }
                            ]
                        }
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:ngsi_ld:city:DeviceModel;1",
                "@type": "Interface",
                "displayName": "DeviceModel",
                "contents": [
                    {
                        "@type": "Property",
                        "name": "source",
                        "schema": "string",
                        "description": "A sequence of characters giving the source of the entity data",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dataProvider",
                        "description": "Specifies the URL to information about the provider of this information",
                        "schema": "string",
                        "writable": true
                    },
                    {
                        "@type": "Property",
                        "name": "dateModified",
                        "schema": "dateTime",
                        "description": "The timestamp when the data was updated",
                        "writable": true
                    },
                    {
                        "@type": "Component",
                        "name": "category",
                        "schema": "dtmi:digitaltwins:ngsi_ld:city:deviceCategory;1",
                        "displayName": "Category"
                    }
                ],
                "@context": ["dtmi:dtdl:context;2"]
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:CityFurniture;1",
                "@type": "Interface",
                "displayName": "City Furniture",
                "extends": "dtmi:digitaltwins:s4city:city:CityObject;1",
                "description": "",
                "contents": [],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:CityObject;1",
                "@type": "Interface",
                "displayName": "City Object",
                "extends": "dtmi:digitaltwins:GeoSPARQL:Feature;1",
                "description": "Generic class for describing city objects.",
                "contents": [],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:city:Pole;1",
                "@type": "Interface",
                "displayName": "Pole",
                "extends": "dtmi:digitaltwins:s4city:city:CityFurniture;1",
                "description": "pole",
                "contents": [
                    {
                        "@type": "Relationship",
                        "name": "refStreetlight",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:Streetlight;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refAirQualityObserved",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:AirQualityObserved;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refNoiseLevel",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:NoiseLevelObserved;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refWeather",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:WeatherObserved;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refCrowdFlow",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:CrowdFlowObserved;1"
                    },
                    {
                        "@type": "Relationship",
                        "name": "refEVChargingStation",
                        "target": "dtmi:digitaltwins:ngsi_ld:city:EVChargingStation;1"
                    }
                ],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:AdministrativeArea;1",
                "@type": "Interface",
                "displayName": "Administrative Area",
                "extends": "dtmi:digitaltwins:GeoSPARQL:Feature;1",
                "description": "An administrative division, unit, entity, area or region, also referred to as a subnational entity, constituent unit, or country subdivision, is a portion of a country or other region delineated for the purpose of administration. (https://en.wikipedia.org/wiki/Administrative_division)",
                "contents": [],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:City;1",
                "@type": "Interface",
                "displayName": "City",
                "extends": "dtmi:digitaltwins:s4city:city:AdministrativeArea;1",
                "description": "A city is a large human settlement. A city is distinguished from other human settlements by its relatively great size, but also by its functions and its special symbolic status, which may be conferred by a central authority. (https://en.wikipedia.org/wiki/City)",
                "contents": [],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:Country;1",
                "@type": "Interface",
                "displayName": "Country",
                "extends": "dtmi:digitaltwins:s4city:city:AdministrativeArea;1",
                "description": "A country is a region that is identified as a distinct national entity in political geography. (https://en.wikipedia.org/wiki/Country)",
                "contents": [],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:District;1",
                "@type": "Interface",
                "displayName": "District",
                "extends": "dtmi:digitaltwins:s4city:city:AdministrativeArea;1",
                "description": "A district is a type of administrative division that, in some countries, is managed by local government. Across the world, areas known as 'districts' vary greatly in size, spanning regions or counties, several municipalities, subdivisions of municipalities, school district, or political district. (https://en.wikipedia.org/wiki/District)",
                "contents": [],
                "@context": "dtmi:dtdl:context;2"
            },
            {
                "@id": "dtmi:digitaltwins:s4city:city:Neighbourhood;1",
                "@type": "Interface",
                "displayName": "Neighbourhood",
                "extends": "dtmi:digitaltwins:s4city:city:AdministrativeArea;1",
                "description": "A neighbourhood (British English), or neighborhood (American English; see spelling differences), is a geographically localised community within a larger city, town, suburb or rural area. (https://en.wikipedia.org/wiki/Neighbourhood)",
                "contents": [],
                "@context": "dtmi:dtdl:context;2"
            }
        ],
        "modelsMetadata": [],
        "defaultPath": "",
        "defaultContext": "dtmi:dtdl:context;2",
        "projectDescription": "",
        "projectName": "New",
        "templates": []
    }
}
