{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://github.com/microsoft/iot-cardboard-js/tree/main/schemas/3DScenesConfiguration/v1.0.0/3DScenesConfiguration.schema.json",
    "title": "I3DScenesConfig",
    "description": "A vocabulary to annotate and validate the JSON representation of 3D scene configuration data",
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "$schema": {
            "type": "string"
        },
        "configuration": {
            "type": "object",
            "additionalProperties": false,
            "description": "3D scene configuration data",
            "properties": {
                "scenes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/IScene"
                    }
                },
                "behaviors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/IBehavior"
                    }
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/ILayer"
                    }
                }
            },
            "required": ["scenes", "behaviors", "layers"]
        }
    },
    "required": ["$schema", "configuration"],
    "$defs": {
        "IScene": {
            "type": "object",
            "description": "A scene is a single view that can be rendered from 3D assets",
            "additionalProperties": false,
            "properties": {
                "id": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "elements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/IElement"
                    }
                },
                "behaviorIDs": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "description": "A reference to a behavior present in this scene"
                    }
                },
                "assets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/IAsset"
                    }
                }
            },
            "required": [
                "id",
                "displayName",
                "elements",
                "behaviorIDs",
                "assets"
            ]
        },
        "IElement": {
            "anyOf": [
                {
                    "$ref": "#/$defs/ITwinToObjectMapping"
                },
                {
                    "$ref": "#/$defs/ICustomProperty"
                }
            ]
        },
        "IAsset": {
            "description": "A 3D asset used to create the scene",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "extensionProperties": {
                    "$ref": "#/$defs/IExtensionProperties"
                }
            },
            "required": ["type", "url"]
        },
        "IDataSource": {
            "anyOf": [
                {
                    "$ref": "#/$defs/IElementTwinToObjectMappingDataSource"
                },
                {
                    "$ref": "#/$defs/ICustomProperty"
                }
            ]
        },
        "IBehavior": {
            "type": "object",
            "description": "A behavior applies visual or interactive representations of twin state to objects in the scene",
            "additionalProperties": false,
            "properties": {
                "id": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "twinAliases": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "description": "Twin aliases present on this behavior"
                    }
                },
                "datasources": {
                    "type": "array",
                    "description": "Data sources return an array of objects.  Each object is expected to have the same schema.  These objects can then be mapped over in visuals.",
                    "items": {
                        "$ref": "#/$defs/IDataSource"
                    }
                },
                "visuals": {
                    "type": "array",
                    "description": "Visuals take a datasource, and modify objects in the scene based on expressions.  They allow you to color objects based on their state, float badges under alert conditions and configure popovers that trigger with user interaction",
                    "items": {
                        "$ref": "#/$defs/IVisual"
                    }
                }
            },
            "required": ["id", "displayName", "datasources", "visuals"]
        },
        "IVisual": {
            "anyOf": [
                {
                    "$ref": "#/$defs/IPopoverVisual"
                },
                {
                    "$ref": "#/$defs/IStatusColoringVisual"
                },
                {
                    "$ref": "#/$defs/IAlertVisual"
                }
            ]
        },
        "ILayer": {
            "type": "object",
            "description": "Layers are used to group behavior visibility",
            "additionalProperties": false,
            "properties": {
                "id": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "behaviorIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extensionProperties": {
                    "$ref": "#/$defs/IExtensionProperties"
                }
            },
            "required": ["id", "displayName", "behaviorIDs"]
        },
        "IExtensionProperties": {
            "type": "object",
            "description": "Optional bag of non-schematized extension properties"
        },
        "IGroupID": {
            "type": "string",
            "description": "Widget group to which a widget belongs"
        },
        "IValueExpression": {
            "type": "string",
            "description": "Expression which evaluates to a numeric value"
        },
        "IObjectIDs": {
            "type": "object",
            "description": "objectIDs specify the objects in the scene that a visual pertains to",
            "additionalProperties": false,
            "properties": {
                "expression": {
                    "type": "string"
                },
                "extensionProperties": {
                    "$ref": "#/$defs/IExtensionProperties"
                }
            },
            "required": ["expression"]
        },
        "INumericOrInfinityType": {
            "anyOf": [
                { "type": "number" },
                { "const": "Infinity" },
                { "const": "-Infinity" }
            ]
        },
        "ICustomProperty": {
            "type": "object",
            "description": "Free form property",
            "properties": {
                "type": {
                    "const": "CustomProperty"
                }
            },
            "required": ["type"]
        },
        "ITwinToObjectMapping": {
            "type": "object",
            "description": "An elements maps twins to objects in the scene",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "const": "TwinToObjectMapping"
                },
                "id": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "linkedTwinID": {
                    "type": "string",
                    "description": "The twin referenced by this element"
                },
                "objectIDs": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "Array of of object IDs in the scene",
                    "items": {
                        "type": "string",
                        "description": "An object ID represents 3D meshes in the scene"
                    }
                },
                "twinAliases": {
                    "type": "object",
                    "description": "Links to relevant twins other than the primary linkedTwin.  These aliases can be referenced in behavior expressions.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extensionProperties": {
                    "$ref": "#/$defs/IExtensionProperties"
                }
            },
            "required": [
                "type",
                "id",
                "displayName",
                "linkedTwinID",
                "objectIDs"
            ]
        },
        "IElementTwinToObjectMappingDataSource": {
            "type": "object",
            "description": "These datasources get their objects from the elements defined in a scene",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "const": "ElementTwinToObjectMappingDataSource"
                },
                "elementIDs": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "description": "An element ID contained in this data source"
                    }
                },
                "extensionProperties": {
                    "$ref": "#/$defs/IExtensionProperties"
                }
            },
            "required": ["type", "elementIDs"]
        },
        "IGaugeWidgetConfiguration": {
            "type": "object",
            "additionalProperties": false,
            "description": "Widget configuration specifies widget specific properties that are used for rendering this gauge",
            "properties": {
                "units": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "valueRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/IValueRange"
                    }
                }
            }
        },
        "ILinkWidgetConfiguration": {
            "type": "object",
            "additionalProperties": false,
            "description": "Widget configuration specifies widget specific properties that are used for rendering this Link",
            "properties": {
                "linkExpression": {
                    "type": "string",
                    "description": "Template string which evalues to http link"
                }
            }
        },
        "IGaugeWidget": {
            "type": "object",
            "description": "A gauge widget",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "const": "Gauge"
                },
                "groupID": {
                    "$ref": "#/$defs/IGroupID"
                },
                "valueExpression": {
                    "$ref": "#/$defs/IValueExpression"
                },
                "widgetConfiguration": {
                    "$ref": "#/$defs/IGaugeWidgetConfiguration"
                },
                "extensionProperties": {
                    "$ref": "#/$defs/IExtensionProperties"
                }
            },
            "required": ["type", "valueExpression", "widgetConfiguration"]
        },
        "ILinkWidget": {
            "type": "object",
            "description": "A link widget which uses a string template to create a parametrized link",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "const": "Link"
                },
                "groupID": {
                    "$ref": "#/$defs/IGroupID"
                },
                "widgetConfiguration": {
                    "$ref": "#/$defs/ILinkWidgetConfiguration"
                },
                "extensionProperties": {
                    "$ref": "#/$defs/IExtensionProperties"
                }
            },
            "required": ["type", "widgetConfiguration"]
        },
        "IWidget": {
            "anyOf": [
                {
                    "$ref": "#/$defs/IGaugeWidget"
                },
                {
                    "$ref": "#/$defs/ILinkWidget"
                }
            ]
        },
        "IPopoverVisual": {
            "type": "object",
            "description": "A popover displays information about a datasource when you click on any of the associated objectIDs",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "const": "Popover"
                },
                "title": {
                    "type": "string"
                },
                "widgets": {
                    "type": "array",
                    "description": "Widgets are visuals within a popover.  Widgets can be grouped via widgetGroups property.",
                    "items": {
                        "$ref": "#/$defs/IWidget"
                    }
                },
                "widgetGroups": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "description": "Defines a widget group, referenced by ID in widgets",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "title": {
                                "type": "string"
                            },
                            "orientation": {
                                "type": "string"
                            }
                        },
                        "required": ["id"]
                    }
                },
                "objectIDs": {
                    "$ref": "#/$defs/IObjectIDs"
                }
            },
            "required": ["type", "title", "widgets", "objectIDs"]
        },
        "IValueRange": {
            "type": "object",
            "additionalProperties": false,
            "description": "Numeric range to trigger coloring",
            "properties": {
                "id": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "min": {
                    "$ref": "#/$defs/INumericOrInfinityType"
                },
                "max": {
                    "$ref": "#/$defs/INumericOrInfinityType"
                }
            },
            "required": ["id", "color", "min", "max"]
        },
        "IStatusColoringVisual": {
            "type": "object",
            "description": "a StatusColoring visual is used for mapping an expression result to a color",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "const": "StatusColoring"
                },
                "statusValueExpression": {
                    "type": "string",
                    "description": "Expression which evaluates to numeric value"
                },
                "valueRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/IValueRange"
                    }
                },
                "objectIDs": {
                    "$ref": "#/$defs/IObjectIDs"
                },
                "extensionProperties": {
                    "$ref": "#/$defs/IExtensionProperties"
                }
            },
            "required": [
                "type",
                "statusValueExpression",
                "valueRanges",
                "objectIDs"
            ]
        },
        "IAlertVisual": {
            "type": "object",
            "description": "Alert visual are used to show specific iconography when a boolean expression is true",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "const": "Alert"
                },
                "triggerExpression": {
                    "type": "string",
                    "description": "Expression which evaluates to a boolean value"
                },
                "labelExpression": {
                    "type": "string",
                    "description": "Expression which evalues to a string value"
                },
                "iconName": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "objectIDs": {
                    "$ref": "#/$defs/IObjectIDs"
                },
                "extensionProperties": {
                    "$ref": "#/$defs/IExtensionProperties"
                }
            },
            "required": [
                "type",
                "triggerExpression",
                "labelExpression",
                "iconName",
                "color",
                "objectIDs"
            ]
        }
    }
}
